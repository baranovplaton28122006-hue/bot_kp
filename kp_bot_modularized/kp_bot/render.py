"""
render.py

–û—Ç—Ä–∏—Å–æ–≤–∫–∞ —ç–∫—Ä–∞–Ω–æ–≤ —à–∞–≥–æ–≤: —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞, –∫–Ω–æ–ø–æ–∫ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π.
(–§–∞–π–ª –∞–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏; –ª–æ–≥–∏–∫–∞ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–∞.)
"""

from telebot import types
import kp_bot.runtime as runtime
from .states import St
from .utils import safe_edit_text, framed, framed_bottom, send_temp
from .config import EMOJI
from .flows import (
    USER, get_flow, numbered_title, cur_step, set_step, next_step,
    set_last_mid, get_last_mid, render_for_step
)
from .keyboards import kb, main_menu_kb, yn_kb_all_horizontal, build_paginated_rows, bottom_row_for_step
from .multiselect import ensure_multiselect, multiselect_state
from .options import *

# [auto]: —Ñ—É–Ω–∫—Ü–∏—è multiselect_screen()
def multiselect_screen(ch: int, step: str, title_html: str, options,
                       single: bool = False, add_other_text: str = None, add_preset: bool = False):
    ensure_multiselect(ch, step, single=single)
    page = multiselect_state(ch)["page"]
    rows = build_paginated_rows(ch, step, options, page, add_other_text=add_other_text, add_preset=add_preset)

    other_btn = None
    done_btn = None
    for r in rows:
        for btn in list(r):
            cd = getattr(btn, "callback_data", "") or ""
            if cd.startswith("other::") and other_btn is None:
                other_btn = btn
                r.remove(btn)
            elif cd.startswith("done::") and done_btn is None:
                done_btn = btn
                r.remove(btn)

    bottom = bottom_row_for_step(step, add_back=True, add_other=(other_btn is not None), add_done=(done_btn is not None))
    if other_btn is not None:
        bottom[1] = other_btn
    if done_btn is not None:
        bottom[-1] = done_btn
    rows.append(bottom)

    m = types.InlineKeyboardMarkup()
    for r in rows:
        if r:
            m.row(*r)

    text = f"{render_for_step(ch, step)}{framed(f'<b>{title_html}</b>')}"
    return text, m


# [auto]: —Ñ—É–Ω–∫—Ü–∏—è send_step()
def send_step(ch: int, step_key: str, mid: int = None, edit: bool = False):
    flow = get_flow(ch)

    # [auto]: —Ñ—É–Ω–∫—Ü–∏—è NT()
    def NT(step: str, text_html: str) -> str:
        return numbered_title(ch, step, text_html)

    # [auto]: —Ñ—É–Ω–∫—Ü–∏—è _send()
    def _send(text, markup=None):
        if edit and mid:
            try:
                safe_edit_text(ch, mid, text, markup)
                set_last_mid(ch, mid)
                return
            except Exception:
                pass
        m = runtime.bot.send_message(ch, text, reply_markup=markup)
        set_last_mid(ch, m.message_id)

    # === BASE ===
    if step_key == 'name':
        runtime.bot.set_state(ch, St.name, ch)
        title = NT('name', '<b>–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ—Å—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫ –í–∞—Å –∑–æ–≤—É—Ç?</b>')
        _send(f"{render_for_step(ch, 'name')}{framed(title)}\n")
        return

    if step_key == 'org_name':
        runtime.bot.set_state(ch, St.org_name, ch)
        title = NT('org_name', '<b>–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤–∞—à–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è?</b>')
        _send(f"{render_for_step(ch, 'org_name')}{framed(title)}", kb(add_back=True, add_home=True))
        return

    if step_key == 'org_category':
        runtime.bot.set_state(ch, St.org_category, ch)
        title = NT('org_category', '<b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:</b>')
        _send(
            f"{render_for_step(ch, 'org_category')}{framed(title)}",
            kb(
                [types.InlineKeyboardButton("–Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ", callback_data="cat_ul")],
                [types.InlineKeyboardButton("–§–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ", callback_data="cat_fl")],
                [types.InlineKeyboardButton("–ò–ü", callback_data="cat_ip")],
                add_back=True, add_home=True
            )
        )
        return

    if step_key == 'has_site':
        runtime.bot.set_state(ch, St.has_site, ch)
        title = NT('has_site', '<b>–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Å–∞–π—Ç?</b>')
        _send(f"{render_for_step(ch, 'has_site')}{framed(title)}", yn_kb_all_horizontal())
        return

    # >>> –í–ê–ñ–ù–û: —ç—Ç–æ—Ç –±–ª–æ–∫ –±—ã–ª –≤—Å—Ç–∞–≤–ª–µ–Ω —Å–Ω–∞—Ä—É–∂–∏ —Ñ—É–Ω–∫—Ü–∏–∏. –¢–µ–ø–µ—Ä—å –æ–Ω –≤–Ω—É—Ç—Ä–∏ send_step <<<
    if step_key == 'has_site_comment':
        runtime.bot.set_state(ch, St.has_site_comment, ch)
        title = NT('has_site_comment', '<b>–ß—Ç–æ –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è –≤ –≤–∞—à–µ–º —Å–∞–π—Ç–µ, –∏ —á—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å?</b>')
        _send(
            f"{render_for_step(ch, 'has_site_comment')}{framed(title)}\n"
            "<i>–ù–∞–ø—Ä–∏–º–µ—Ä: ¬´–Ω—Ä–∞–≤–∏—Ç—Å—è –¥–∏–∑–∞–π–Ω, –Ω–æ –Ω–µ—Ç –∫–æ—Ä–∑–∏–Ω—ã¬ª.</i>",
            kb(add_back=True, add_home=True)
        )
        return

    if step_key == 'product':
        runtime.bot.set_state(ch, St.product, ch)
        title = NT('product', '<b>–ö–∞–∫–æ–π –ø—Ä–æ–¥—É–∫—Ç –∏–ª–∏ —É—Å–ª—É–≥—É –í—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø—Ä–æ–¥–≤–∏–≥–∞—Ç—å?</b>')
        _send(f"{render_for_step(ch, 'product')}{framed(title)}", kb(add_back=True, add_home=True))
        return

    if step_key == 'biz_goal':
        title = NT('biz_goal', '<b>–ö–∞–∫—É—é –≥–ª–∞–≤–Ω—É—é –∑–∞–¥–∞—á—É –¥–æ–ª–∂–µ–Ω —Ä–µ—à–∏—Ç—å —Å–∞–π—Ç?</b>')
        _send(
            f"{render_for_step(ch, 'biz_goal')}{framed(title)}",
            kb(
                [types.InlineKeyboardButton("–ò–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ —Ç–æ–≤–∞—Ä–∞—Ö, —É—Å–ª—É–≥–∞—Ö", callback_data="goal_info2")],
                [types.InlineKeyboardButton("–ò–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", callback_data="goal_info")],
                [types.InlineKeyboardButton("–ü–æ–≤—ã—à–∞—Ç—å —É–∑–Ω–∞–≤–∞–µ–º–æ—Å—Ç—å –±—Ä–µ–Ω–¥–∞", callback_data="goal_brand")],
                [types.InlineKeyboardButton("–ü—Ä–æ–¥–∞–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –∏–ª–∏ —É—Å–ª—É–≥–∏", callback_data="goal_sell")],
                [types.InlineKeyboardButton("–°–æ–±–∏—Ä–∞—Ç—å –∑–∞—è–≤–∫–∏", callback_data="goal_leads")],
                add_back=True
            )
        )
        return

    if step_key == 'audience':
        runtime.bot.set_state(ch, St.audience, ch)
        title = NT('audience', '<b>–ö—Ç–æ –í–∞—à–∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã?</b>')
        _send(
            f"{render_for_step(ch, 'audience')}{framed_bottom(title)}\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–ª, –≤–æ–∑—Ä–∞—Å—Ç, —Ä–æ–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã.\n\n"
            "<i>–ù–∞–ø—Ä–∏–º–µ—Ä: ¬´–∂–µ–Ω—â–∏–Ω—ã; 25‚Äì40 –ª–µ—Ç; –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ—Å—è –º–æ–¥–æ–π¬ª.</i>\n",
            kb(add_back=True)
        )
        return

    if step_key == 'user_action':
        title = NT('user_action', '<b>–ö–∞–∫–æ–µ —Ü–µ–ª–µ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–æ–ª–∂–µ–Ω —Å–æ–≤–µ—Ä—à–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —Å–∞–π—Ç–µ?</b>')
        _send(
            f"{render_for_step(ch, 'user_action')}{framed(title)}",
            kb(
                [types.InlineKeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="act_lead")],
                [types.InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", callback_data="act_sub")],
                [types.InlineKeyboardButton("–ü–æ–∑–≤–æ–Ω–∏—Ç—å", callback_data="act_call")],
                [types.InlineKeyboardButton("–ö—É–ø–∏—Ç—å", callback_data="act_buy")],
                add_back=True
            )
        )
        return

    if step_key == 'solution':
        info = (
            "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            "<b>–û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥:</b>\n\n"
            "‚Ä¢ <b>–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥</b> ‚Äî SEO –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞.\n"
            "‚Ä¢ <b>–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Å–∞–π—Ç</b> ‚Äî —Ä–∞–∑–¥–µ–ª—ã –æ –∫–æ–º–ø–∞–Ω–∏–∏, —É—Å–ª—É–≥–∞—Ö, –∫–µ–π—Å–∞—Ö.\n"
            "‚Ä¢ <b>–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω</b> ‚Äî –∫–∞—Ç–∞–ª–æ–≥, –∫–æ—Ä–∑–∏–Ω–∞, –æ–ø–ª–∞—Ç–∞ –∏ –¥–æ—Å—Ç–∞–≤–∫–∞.\n"
            "‚Ä¢ <b>–õ–µ–Ω–¥–∏–Ω–≥</b> ‚Äî –æ–¥–Ω–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π —Å–∞–π—Ç –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –ø—Ä–æ–¥–∞–∂ –∏ –∑–∞—è–≤–æ–∫.\n"
            "‚Ä¢ <b>–ß–∞—Ç-–±–æ—Ç</b> ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤/–∑–∞—è–≤–æ–∫."
        )
        title = NT('solution', '<b>–ö–∞–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ –≤–∞–º –Ω—É–∂–Ω–æ?</b>')
        text = f"{render_for_step(ch, 'solution')}{framed(title)}\n{info}"
        _send(
            text,
            kb(
                [types.InlineKeyboardButton("–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ (SEO/–∫–æ–Ω—Ç–µ–∫—Å—Ç)", callback_data="sol_mkt")],
                [types.InlineKeyboardButton("–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Å–∞–π—Ç", callback_data="sol_corp")],
                [types.InlineKeyboardButton("–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω", callback_data="sol_shop")],
                [types.InlineKeyboardButton("–õ–µ–Ω–¥–∏–Ω–≥", callback_data="sol_land")],
                [types.InlineKeyboardButton("–ß–∞—Ç-–±–æ—Ç", callback_data="sol_bot")],
                add_back=True
            )
        )
        return

    # === BRANCH & COMMON ===
    if step_key == 'A1_blocks':
        t_html = NT('A1_blocks', '<b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ –±–ª–æ–∫–∏/—Ä–∞–∑–¥–µ–ª—ã:</b>')
        sol = USER[ch]["solution"]
        opts = A1_LANDING if sol == "–õ–µ–Ω–¥–∏–Ω–≥" else A1_CORP
        text, markup = multiselect_screen(ch, 'A1_blocks', t_html, opts, single=False, add_other_text="üìù –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", add_preset=True)
        _send(text, markup); return

    if step_key == 'A2_functions':
        t_html = NT('A2_functions', '<b>–ü–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ª–∏ –í—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω–∞ —Å–∞–π—Ç–µ?</b>')
        text, markup = multiselect_screen(ch, 'A2_functions', t_html, A2_FUNCTIONS, single=False, add_other_text="üìù –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç")
        _send(text, markup); return

    if step_key == 'B1_sections':
        t_html = NT('B1_sections', '<b>–†–∞–∑–¥–µ–ª—ã –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞:</b>')
        text, markup = multiselect_screen(ch, 'B1_sections', t_html, B1_SECTIONS, single=False, add_other_text="üìù –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", add_preset=True)
        _send(text, markup); return

    if step_key == 'B2_assort':
        t_html = NT('B2_assort', '<b>–°–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ?</b>')
        text, markup = multiselect_screen(ch, 'B2_assort', t_html, B2_ASSORT, single=True)
        _send(text, markup); return

    if step_key == 'B3_functions':
        t_html = NT('B3_functions', '<b>–ö–∞–∫–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω—É–∂–µ–Ω –≤ –º–∞–≥–∞–∑–∏–Ω–µ, –∫—Ä–æ–º–µ –∫–æ—Ä–∑–∏–Ω—ã?</b>')
        text, markup = multiselect_screen(ch, 'B3_functions', t_html, B3_FUNCTIONS, single=False)
        _send(text, markup); return

    if step_key == 'C1_tasks':
        t_html = NT('C1_tasks', '<b>–ì–¥–µ —á–∞—Ç-–±–æ—Ç –ø—Ä–∏–Ω–µ—Å—ë—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø–æ–ª—å–∑—É?</b>')
        text, markup = multiselect_screen(ch, 'C1_tasks', t_html, C1_TASKS, single=False, add_other_text="üìù –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", add_preset=True)
        _send(text, markup); return

    if step_key == 'C2_platforms':
        t_html = NT('C2_platforms', '<b>–í –∫–∞–∫–∏—Ö –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞—Ö/–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å —á–∞—Ç-–±–æ—Ç?</b>')
        text, markup = multiselect_screen(ch, 'C2_platforms', t_html, C2_PLATFORMS, single=False, add_other_text="üìù –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç")
        _send(text, markup); return

    if step_key == 'C3_integrations':
        t_html = NT('C3_integrations', '<b>–ù—É–∂–Ω—ã –ª–∏ –í–∞–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏?</b>')
        text, markup = multiselect_screen(ch, 'C3_integrations', t_html, C3_INTEGR, single=False)
        _send(text, markup); return

    if step_key == 'D1_goals':
        t_html = NT('D1_goals', '<b>–ö–∞–∫—É—é –∑–∞–¥–∞—á—É —Ö–æ—Ç–∏—Ç–µ —Ä–µ—à–∏—Ç—å –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–º?</b>')
        text, markup = multiselect_screen(ch, 'D1_goals', t_html, D1_GOALS, single=False, add_other_text="üìù –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", add_preset=True)
        _send(text, markup); return

    if step_key == 'D2_channels':
        t_html = NT('D2_channels', '<b>–ö–∞–∫–∏–µ –∫–∞–Ω–∞–ª—ã –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?</b>')
        text, markup = multiselect_screen(ch, 'D2_channels', t_html, D2_CHANNELS, single=False)
        _send(text, markup); return

    if step_key == 'D4_budget':
        t_html = NT('D4_budget', '<b>–ö–∞–∫–æ–π –ø—Ä–∏–º–µ—Ä–Ω—ã–π –±—é–¥–∂–µ—Ç –Ω–∞ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –µ–∂–µ–º–µ—Å—è—á–Ω–æ?</b>')
        text, markup = multiselect_screen(ch, 'D4_budget', t_html, D4_BUDGET, single=True)
        _send(text, markup); return

    if step_key == 'design':
        t_html = NT('design', '<b>–ö–∞–∫–æ–π –¥–∏–∑–∞–π–Ω –í—ã —Ö–æ—Ç–∏—Ç–µ?</b>')
        text, markup = multiselect_screen(ch, 'design', t_html, DESIGN, single=True)
        _send(text, markup); return

    if step_key == 'content':
        t_html = NT('content', '<b>–ö—Ç–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –º–∞—Ç–µ—Ä–∏–∞–ª—ã?</b>')
        text, markup = multiselect_screen(ch, 'content', t_html, CONTENT, single=True)
        _send(text, markup); return

    if step_key == 'timeline':
        sol = USER[ch]["solution"]
        if sol in ("–õ–µ–Ω–¥–∏–Ω–≥", "–ß–∞—Ç-–±–æ—Ç", "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ (SEO/–∫–æ–Ω—Ç–µ–∫—Å—Ç)"):
            opts = [("1-2w", "1‚Äì2 –Ω–µ–¥–µ–ª–∏"), ("2-4w", "2‚Äì4 –Ω–µ–¥–µ–ª–∏")]
        elif sol == "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Å–∞–π—Ç":
            opts = [("2-4w", "2‚Äì4 –Ω–µ–¥–µ–ª–∏"), ("1-2m", "1‚Äì2 –º–µ—Å—è—Ü–∞")]
        elif sol == "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω":
            opts = [("1-2m", "1‚Äì2 –º–µ—Å—è—Ü–∞"), ("2-4m", "2‚Äì4 –º–µ—Å—è—Ü–∞")]
        else:
            opts = []
        t_html = NT('timeline', '<b>–ö–∞–∫ –±—ã—Å—Ç—Ä–æ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞–±–æ—Ç—É?</b>')
        text, markup = multiselect_screen(ch, 'timeline', t_html, opts, single=True)
        _send(text, markup); return

    if step_key == 'contacts':
        runtime.bot.set_state(ch, St.contacts, ch)
        frame = "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
        head = NT('contacts', '<b>–ë–ª–∞–≥–æ–¥–∞—Ä—é –í–∞—Å –∑–∞ –æ—Ç–≤–µ—Ç—ã. –û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>')
        body_html = (
            f"{frame}\n{head}\n{frame}\n"
            "‚Ä¢ üìß –ü–æ—á—Ç–∞\n"
            "‚Ä¢ üì± –¢–µ–ª–µ—Ñ–æ–Ω\n"
            "‚Ä¢ üí¨ @username\n\n"
            "<i>–ú–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –ª—é–±—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–º.</i>"
        )
        _send(
            f"{render_for_step(ch, 'contacts')}{body_html}",
            kb([types.InlineKeyboardButton("üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", callback_data="share_contact")], add_back=True, add_home=True)
        )
        return

    if step_key == 'confirm':
        d = USER[ch]["data"]
        tl_items = (d.get("timeline") or {}).get("items") or []
        tl_code = tl_items[0] if tl_items else None
        from .options import LABELS, humanize_list
        tl_label = LABELS["timeline"].get(tl_code, "‚Äî")
        design_text = ", ".join(humanize_list("design", (d.get("design") or {}).get("items", []))) or "‚Äî"
        content_text = ", ".join(humanize_list("content", (d.get("content") or {}).get("items", []))) or "‚Äî"
        budget_items = (d.get("D4_budget") or {}).get("items") or []
        budget_code = budget_items[0] if budget_items else None
        budget_text = LABELS["D4_budget"].get(budget_code, "‚Äî")

        name = d.get("name", "‚Äî")
        s = [
            f"<b>–ò–º—è:</b> {name}",
            f"<b>–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:</b> {d.get('org_name', '‚Äî')}",
            f"<b>–ï—Å—Ç—å —Å–∞–π—Ç:</b> {d.get('has_site', '‚Äî')}",
        ]
        if d.get("has_site_comment"):
            s.append(f"<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Å–∞–π—Ç—É:</b> {d.get('has_site_comment')}")
        s += [
            f"<b>–ü—Ä–æ–¥—É–∫—Ç/—É—Å–ª—É–≥–∞:</b> {d.get('product', '‚Äî')}",
            f"<b>–ë–∏–∑–Ω–µ—Å-–∑–∞–¥–∞—á–∞:</b> {d.get('biz_goal', '‚Äî')}",
            f"<b>–¶–ê:</b> {d.get('audience', '‚Äî')}",
            f"<b>–¶–µ–ª–µ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b> {d.get('user_action', '‚Äî')}",
            f"<b>–¢–∏–ø —Ä–µ—à–µ–Ω–∏—è:</b> {USER[ch].get('solution','‚Äî')}",
            f"<b>–î–∏–∑–∞–π–Ω:</b> {design_text}",
            f"<b>–ö–æ–Ω—Ç–µ–Ω—Ç:</b> {content_text}",
            f"<b>–ë—é–¥–∂–µ—Ç:</b> {budget_text}",
            f"<b>–°—Ä–æ–∫–∏:</b> {tl_label}",
            f"<b>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</b> {d.get('contacts', '‚Äî')}",
        ]
        title = NT('confirm', '<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:</b>')
        _send(
            f"{render_for_step(ch, 'confirm')}{framed(title)}\n" + "\n".join(s),
            kb([types.InlineKeyboardButton(f"{EMOJI['confirm']} –°–æ–∑–¥–∞—Ç—å –ö–ü", callback_data="go_pdf")], add_home=True)
        )
        return