"""
handlers.py

–ì–ª–∞–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ callback-–∫–Ω–æ–ø–æ–∫. –£–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –ø–æ —à–∞–≥–∞–º –∞–Ω–∫–µ—Ç—ã –∏ –∑–∞–ø–∏—Å—å—é –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
(–§–∞–π–ª –∞–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏; –ª–æ–≥–∏–∫–∞ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–∞.)
"""


import os
from telebot import types
import kp_bot.runtime as runtime
from .states import St
from .flows import USER, init_user, get_flow, cur_step, set_step, next_step, set_last_mid, get_last_mid, apply_branch_flow, go_back
from .keyboards import kb, main_menu_kb
from .render import send_step
from .utils import safe_edit_text, send_temp, framed, h, safe_delete
from .multiselect import multiselect_state, toggle_select, save_multiselect, set_other_value, start_multiselect
from .options import *
from .pdfgen import make_kp_html
from .contacts import parse_contacts, format_contacts

# [auto]: —Ñ—É–Ω–∫—Ü–∏—è register()
def register(bot_instance):
    # share contact inline button
    @bot_instance.callback_query_handler(func=lambda c: c.data == "share_contact")
    # [auto]: –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ on_share_contact()
    def on_share_contact(c):
        ch = c.message.chat.id
        bot_instance.answer_callback_query(c.id)
        share_kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        share_kb.add(types.KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä", request_contact=True))
        send_temp(
            ch,
            "üëá –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä¬ª –Ω–∏–∂–µ.\n"
            "–Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—é –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ Telegram-–Ω–∏–∫ –≤ –∫–æ–Ω—Ç–∞–∫—Ç—ã –ö–ü.",
            ttl=6,
            reply_markup=share_kb
        )

    @bot_instance.message_handler(content_types=['contact'], state=St.contacts)
    # [auto]: —Ñ—É–Ω–∫—Ü–∏—è in_contact_obj()
    def in_contact_obj(m):
        ch = m.chat.id
        parsed = parse_contacts("", tg_username=m.from_user.username,
                                phone_from_share=(m.contact.phone_number if m.contact else None))
        USER[ch]["data"]["contacts"] = format_contacts(parsed)
        safe_delete(ch, m.message_id)
        send_temp(ch, "‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω!", ttl=3, reply_markup=types.ReplyKeyboardRemove())
        next_step(ch)
        send_step(ch, cur_step(ch), mid=get_last_mid(ch), edit=True)

    @bot_instance.callback_query_handler(func=lambda c: True)
    # [auto]: –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ on_cb()
    def on_cb(c):
        ch, mid, data = c.message.chat.id, c.message.message_id, c.data
        if ch not in USER:
            init_user(ch)
        set_last_mid(ch, mid)

        if data == "ui_back":
            go_back(ch, mid); return
        try:
            bot_instance.answer_callback_query(c.id)
        except Exception:
            pass
        runtime.log.info(f"cb:{data} idx={USER.get(ch, {}).get('idx')} step={USER.get(ch, {}).get('flow', [None])[USER.get(ch, {}).get('idx', 0)] if USER.get(ch) else '‚Äî'}")

        try:
            if data == "act_start":
                init_user(ch)
                send_step(ch, 'name', mid, edit=True)
                return
            if data == "act_about":
                about_text = (
                    "‚ÑπÔ∏è <b>–û –±–æ—Ç–µ</b>\n\n"
                    "1) –û—Ç–≤–µ—á–∞–µ—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã (‚âà3‚Äì5 –º–∏–Ω—É—Ç).\n"
                    "2) –í—ã–±–∏—Ä–∞–µ—Ç–µ —Ä–µ—à–µ–Ω–∏–µ –∏ –Ω—É–∂–Ω—ã–µ –æ–ø—Ü–∏–∏.\n"
                    "3) –ü–æ–ª—É—á–∞–µ—Ç–µ –≥–æ—Ç–æ–≤–æ–µ –ö–ü –≤ PDF.\n\n"
                    "<b>–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å</b>\n"
                    "–û—Ç–≤–µ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ö–ü –∏ —Å–≤—è–∑–∏ —Å –≤–∞–º–∏.\n\n"
                    "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º¬ª –Ω–∏–∂–µ."
                )
                about_kb = types.InlineKeyboardMarkup()
                about_kb.add(types.InlineKeyboardButton("üìù –ù–∞—á–∞—Ç—å", callback_data="act_start"))
                about_kb.add(types.InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url="https://t.me/PlaBarov"))  # noqa
                safe_edit_text(ch, mid, about_text, about_kb)
                return

            if data == "ui_home":
                safe_edit_text(ch, mid, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", main_menu_kb()); return

            if data.startswith("cat_"):
                USER[ch]["data"]["org_category"] = {
                    "cat_fl": "–§–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ", "cat_ip": "–ò–ü", "cat_ul": "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ", "cat_other": "–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç"
                }[data]
                next_step(ch); send_step(ch, cur_step(ch), mid, edit=True); return

            if data in ("yn_yes", "yn_no") and cur_step(ch) == "has_site":
                USER[ch].setdefault("data", {})["has_site"] = "–î–∞" if data == "yn_yes" else "–ù–µ—Ç"
                if data == "yn_yes":
                    USER[ch]["flow"] = ["name", "org_name", "has_site", "has_site_comment", "contacts", "confirm"]
                    set_step(ch, "has_site_comment")
                    bot_instance.set_state(ch, St.has_site_comment, ch)
                    send_step(ch, "has_site_comment", mid, edit=True)
                else:
                    USER[ch]["flow"] = ["name", "org_name", "has_site", "biz_goal", "user_action", "product", "solution"]
                    set_step(ch, "biz_goal")
                    send_step(ch, "biz_goal", mid, edit=True)
                return

            if data.startswith("goal_"):
                mm = {"goal_sell": "–ü—Ä–æ–¥–∞–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –∏–ª–∏ —É—Å–ª—É–≥–∏", "goal_leads": "–°–æ–±–∏—Ä–∞—Ç—å –∑–∞—è–≤–∫–∏",
                      "goal_info2": "–ò–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ —Ç–æ–≤–∞—Ä–∞—Ö –∏–ª–∏ —É—Å–ª—É–≥–∞—Ö",
                      "goal_info": "–ò–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
                      "goal_brand": "–ü–æ–≤—ã—à–∞—Ç—å —É–∑–Ω–∞–≤–∞–µ–º–æ—Å—Ç—å –±—Ä–µ–Ω–¥–∞"}
                if data == "goal_custom":
                    bot_instance.set_state(ch, St.biz_goal, ch)
                    safe_edit_text(ch, mid, "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∫–ª—é—á–µ–≤—É—é –∑–∞–¥–∞—á—É —Ç–µ–∫—Å—Ç–æ–º:", kb())
                else:
                    USER[ch]["data"]["biz_goal"] = mm[data]
                    next_step(ch); send_step(ch, cur_step(ch), mid, edit=True)
                return

            if data.startswith("act_"):
                mm = {"act_buy": "–ö—É–ø–∏—Ç—å", "act_call": "–ü–æ–∑–≤–æ–Ω–∏—Ç—å", "act_lead": "–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", "act_sub": "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"}
                if data == "act_custom":
                    bot_instance.set_state(ch, St.user_action, ch)
                    safe_edit_text(ch, mid, "–£–∫–∞–∂–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ —Ç–µ–∫—Å—Ç–æ–º:", kb())
                else:
                    USER[ch]["data"]["user_action"] = mm[data]
                    next_step(ch); send_step(ch, cur_step(ch), mid, edit=True)
                return

            if data.startswith("sol_"):
                label = {"sol_land": "–õ–µ–Ω–¥–∏–Ω–≥", "sol_shop": "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω", "sol_corp": "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Å–∞–π—Ç",
                         "sol_bot": "–ß–∞—Ç-–±–æ—Ç", "sol_mkt": "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ (SEO/–∫–æ–Ω—Ç–µ–∫—Å—Ç)"}[data]
                apply_branch_flow(ch, label)
                next_step(ch)
                send_step(ch, cur_step(ch), mid, edit=True)
                return

            if data.startswith("opt::"):
                _, step, key = data.split("::", 2)
                from .multiselect import toggle_select
                toggle_select(ch, key)
                send_step(ch, step, mid, edit=True); return

            if data.startswith("done::"):
                _, step = data.split("::", 1)
                from .multiselect import save_multiselect
                save_multiselect(ch)
                next_step(ch); send_step(ch, cur_step(ch), mid, edit=True); return

            if data.startswith("other::"):
                _, step = data.split("::", 1)
                multiselect_state(ch)["step"] = step
                bot_instance.set_state(ch, St.other_input, ch)
                safe_edit_text(ch, mid, "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–∞—Ä–∏–∞–Ω—Ç —Ç–µ–∫—Å—Ç–æ–º:", kb())
                return

            if data.startswith("preset::"):
                _, step = data.split("::", 1)
                if step == "A1_blocks":
                    sol = USER[ch]["solution"]
                    preset = [k for k, _ in (A1_LANDING if sol == "–õ–µ–Ω–¥–∏–Ω–≥" else A1_CORP)][:4]
                elif step == "B1_sections":
                    preset = ["home", "catalog", "pdp", "cart", "contacts"]
                elif step == "C1_tasks":
                    preset = ["faq", "consult", "booking"]
                elif step == "D1_goals":
                    preset = ["leads", "seo"]
                else:
                    preset = []
                start_multiselect(ch, step, single=False, seed=preset)
                send_step(ch, step, mid, edit=True); return

            if data.startswith("page::"):
                _, step, page_s = data.split("::", 2)
                st = multiselect_state(ch)
                st["step"] = step
                st["page"] = max(0, int(page_s))
                send_step(ch, step, mid, edit=True); return

            if data in ("go_pdf", "go_kp"):
                try:
                    path = make_kp_html(ch)
                    with open(path, "rb") as f:
                        bot_instance.send_document(
                            ch, f,
                            visible_file_name=os.path.basename(path),
                            caption="‚úÖ –í–∞—à–µ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!"
                        )
                    mgr_kb = types.InlineKeyboardMarkup()
                    mgr_kb.add(types.InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url="https://t.me/PlaBarov"))
                    bot_instance.send_message(ch, "–ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É:", reply_markup=mgr_kb)
                except Exception as e:
                    runtime.log.error(f"make_kp_html failed: {e}")
                    bot_instance.send_message(ch, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª. –°–æ–æ–±—â–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
                return
        except Exception:
            runtime.log.exception("callback error")

    # === MESSAGE HANDLERS (text states) ===
    @bot_instance.message_handler(commands=['start'])
    # [auto]: –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ on_start()
    def on_start(m):
        init_user(m.chat.id)
        try:
            with open("C:/Users/Maksim/Documents/–ü–ª–∞—Ç–æ–Ω/chat bot/–±–æ—Ç –ö–ü/—Ñ–æ—Ç–æ.jpg", "rb") as photo:
                bot_instance.send_photo(m.chat.id, photo)
        except Exception:
            pass
        msg = bot_instance.send_message(
            m.chat.id,
            "üëã <b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!  –ú–µ–Ω—è –∑–æ–≤—É—Ç –ï–≤–∞!</b>\n\n"
            "–Ø –ø–æ–º–æ–≥—É –í–∞–º —Å–æ–∑–¥–∞—Ç—å —Å–∞–π—Ç\n"
            "–∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ!\n\n"
            "–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.",
            reply_markup=main_menu_kb()
        )
        set_last_mid(m.chat.id, msg.message_id)

    @bot_instance.message_handler(state=St.name)
    # [auto]: —Ñ—É–Ω–∫—Ü–∏—è in_name()
    def in_name(m):
        ch = m.chat.id
        name = (m.text or "").strip()
        USER[ch]["data"]["name"] = name
        safe_delete(ch, m.message_id)
        next_step(ch)
        from .utils import h
        safe_edit_text(ch, get_last_mid(ch), f"–†–∞–¥–∞ –Ω–∞—à–µ–º—É –∑–Ω–∞–∫–æ–º—Å—Ç–≤—É, <b>{h(name)}</b>!")
        from threading import Timer
        Timer(2, lambda: send_step(ch, cur_step(ch), mid=get_last_mid(ch), edit=True)).start()

    @bot_instance.message_handler(state=St.org_name)
    # [auto]: —Ñ—É–Ω–∫—Ü–∏—è in_org_name()
    def in_org_name(m):
        ch = m.chat.id
        t = (m.text or "").strip()
        safe_delete(ch, m.message_id)
        if len(t) < 2:
            bot_instance.send_message(ch, "‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏."); return
        USER[ch]["data"]["org_name"] = t
        next_step(ch); send_step(ch, cur_step(ch), mid=get_last_mid(ch), edit=True)

    @bot_instance.message_handler(state=St.has_site_comment)
    # [auto]: —Ñ—É–Ω–∫—Ü–∏—è in_site_comment()
    def in_site_comment(m):
        ch = m.chat.id
        USER[ch]["data"]["has_site_comment"] = (m.text or "").strip()
        safe_delete(ch, m.message_id)
        flow = get_flow(ch)
        extra = []
        if "contacts" not in flow: extra.append("contacts")
        if "confirm" not in flow: extra.append("confirm")
        if extra:
            USER[ch]["flow"] = flow + extra
        USER[ch]["idx"] = USER[ch]["flow"].index("contacts")
        from .flows import clear_state
        clear_state(ch)
        send_step(ch, "contacts", mid=get_last_mid(ch), edit=True)

    @bot_instance.message_handler(state=St.product)
    # [auto]: —Ñ—É–Ω–∫—Ü–∏—è in_product()
    def in_product(m):
        ch = m.chat.id
        USER[ch]["data"]["product"] = (m.text or "").strip()
        safe_delete(ch, m.message_id)
        next_step(ch); send_step(ch, cur_step(ch), mid=get_last_mid(ch), edit=True)

    @bot_instance.message_handler(state=St.biz_goal)
    # [auto]: —Ñ—É–Ω–∫—Ü–∏—è in_goal()
    def in_goal(m):
        ch = m.chat.id
        USER[ch]["data"]["biz_goal"] = (m.text or "").strip()
        safe_delete(ch, m.message_id)
        next_step(ch); send_step(ch, cur_step(ch), mid=get_last_mid(ch), edit=True)

    @bot_instance.message_handler(state=St.audience)
    # [auto]: —Ñ—É–Ω–∫—Ü–∏—è in_aud()
    def in_aud(m):
        ch = m.chat.id
        USER[ch]["data"]["audience"] = (m.text or "").strip()
        safe_delete(ch, m.message_id)
        next_step(ch); send_step(ch, cur_step(ch), mid=get_last_mid(ch), edit=True)

    @bot_instance.message_handler(state=St.user_action)
    # [auto]: —Ñ—É–Ω–∫—Ü–∏—è in_act()
    def in_act(m):
        ch = m.chat.id
        USER[ch]["data"]["user_action"] = (m.text or "").strip()
        safe_delete(ch, m.message_id)
        next_step(ch); send_step(ch, cur_step(ch), mid=get_last_mid(ch), edit=True)

    @bot_instance.message_handler(state=St.other_input)
    # [auto]: —Ñ—É–Ω–∫—Ü–∏—è in_other()
    def in_other(m):
        ch = m.chat.id
        set_other_value(ch, (m.text or "").strip())
        safe_delete(ch, m.message_id)
        step = USER[ch]["multiselect_ctx"]["step"]
        send_step(ch, step, mid=get_last_mid(ch), edit=True)

    @bot_instance.message_handler(state=St.contacts)
    # [auto]: —Ñ—É–Ω–∫—Ü–∏—è in_contacts()
    def in_contacts(m):
        ch, txt = m.chat.id, (m.text or "").strip()
        parsed = parse_contacts(txt, m.from_user.username)
        safe_delete(ch, m.message_id)
        if not parsed:
            send_temp(ch, "‚ùå –í–≤–µ–¥–∏—Ç–µ email, —Ç–µ–ª–µ—Ñ–æ–Ω (—Ü–∏—Ñ—Ä–∞–º–∏) –∏–ª–∏ @username.", ttl=6); return
        USER[ch]["data"]["contacts"] = format_contacts(parsed)
        send_temp(ch, "‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω!", ttl=5)
        next_step(ch); send_step(ch, cur_step(ch), mid=get_last_mid(ch), edit=True)

    @bot_instance.message_handler(func=lambda m: True)
    # [auto]: —Ñ—É–Ω–∫—Ü–∏—è fallback()
    def fallback(m):
        ch = m.chat.id
        safe_delete(ch, m.message_id)
        if ch not in USER:
            on_start(m)