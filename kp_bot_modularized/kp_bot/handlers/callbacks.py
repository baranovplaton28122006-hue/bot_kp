
"""Callback-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã. –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∏–∑ main.register_callbacks()."""
from telebot import types
from kp_bot.states import St
from kp_bot.ui import main_menu_kb, framed, kb
from kp_bot.services.pdf import make_pdf
from kp_bot.services.multiselect import multiselect_state, toggle_select, save_multiselect, set_other_value, build_paginated_rows
from kp_bot.utils import safe_edit_text, send_temp, safe_delete
from kp_bot.progress import BASE_ORDER, COMMON_ORDER, BRANCH_FLOW
from kp_bot.handlers.send_step import send_step

# ===== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–µ—Å—Å–∏–∏ =====
# [auto]: —Ñ—É–Ω–∫—Ü–∏—è init_user()
def init_user(USER, ch: int):
    USER[ch] = {
        "idx": 0,
        "flow": BASE_ORDER.copy(),
        "data": {},
        "branch": None,
        "solution": None,
        "multiselect_ctx": {},
        "last_mid": None
    }

# [auto]: —Ñ—É–Ω–∫—Ü–∏—è set_last_mid()
def set_last_mid(USER, ch: int, mid: int | None):
    if ch in USER:
        USER[ch]["last_mid"] = mid

# [auto]: —Ñ—É–Ω–∫—Ü–∏—è cur_step()
def cur_step(USER, ch: int) -> str:
    return USER[ch]['flow'][USER[ch]['idx']]

# [auto]: —Ñ—É–Ω–∫—Ü–∏—è next_step()
def next_step(USER, ch: int):
    USER[ch]['idx'] = min(USER[ch]['idx'] + 1, len(USER[ch]['flow']) - 1)

# [auto]: —Ñ—É–Ω–∫—Ü–∏—è set_step()
def set_step(USER, ch: int, key: str):
    USER[ch]['idx'] = USER[ch]['flow'].index(key)

# [auto]: —Ñ—É–Ω–∫—Ü–∏—è clear_state()
def clear_state(bot, ch: int):
    try:
        bot.delete_state(ch)
    except Exception:
        pass

# [auto]: —Ñ—É–Ω–∫—Ü–∏—è apply_branch_flow()
def apply_branch_flow(USER, ch: int, solution_label: str):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –º–∞—Ä—à—Ä—É—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–µ—Ç–∫–µ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –º—É–ª—å—Ç–∏–≤—ã–±–æ—Ä–∞."""
    USER[ch]["solution"] = solution_label
    USER[ch]["multiselect_ctx"] = {}
    if solution_label in ("–õ–µ–Ω–¥–∏–Ω–≥", "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Å–∞–π—Ç"):
        b = 'A'
    elif solution_label == "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω":
        b = 'B'
    elif solution_label == "–ß–∞—Ç-–±–æ—Ç":
        b = 'C'
    else:
        b = 'D'
    USER[ch]["branch"] = b

    flow = USER[ch]["flow"]
    if "solution" in flow:
        prefix = flow[:flow.index("solution") + 1]
    else:
        prefix = flow[:]
    USER[ch]["flow"] = prefix + BRANCH_FLOW[b] + COMMON_ORDER
    USER[ch]["idx"] = USER[ch]["flow"].index("solution")

# [auto]: —Ñ—É–Ω–∫—Ü–∏—è go_back()
def go_back(bot, USER, ch: int, mid: int | None):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ ¬´–ù–∞–∑–∞–¥¬ª: —É—á–∏—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –º—É–ª—å—Ç–∏–≤–≤–æ–¥."""
    try:
        st = bot.get_state(ch, ch)
    except Exception:
        st = None
    st = (st or "").lower()

    if st.endswith(":other_input"):
        step = multiselect_state(USER[ch]).get("step") or cur_step(USER, ch)
        clear_state(bot, ch)
        send_step(bot, USER, ch, step, mid=mid, edit=True)
        return

    if st.endswith(":biz_goal"):
        clear_state(bot, ch)
        send_step(bot, USER, ch, "biz_goal", mid=mid, edit=True)
        return

    if st.endswith(":user_action"):
        clear_state(bot, ch)
        send_step(bot, USER, ch, "user_action", mid=mid, edit=True)
        return

    clear_state(bot, ch)
    USER[ch]["idx"] = max(0, USER[ch]["idx"] - 1)
    send_step(bot, USER, ch, cur_step(USER, ch), mid=mid, edit=True)

# ===== –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ =====
# [auto]: –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ register_callbacks()
def register_callbacks(bot, USER, log):
    # /start –∏ /help
    @bot.message_handler(commands=['start', 'help'])
    # [auto]: –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ on_start()
    def on_start(m):
        ch = m.chat.id
        if ch not in USER:
            init_user(USER, ch)

        # –ö–∞—Ä—Ç–∏–Ω–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞)
        try:
            from kp_bot.config import WELCOME_PHOTO_PATH
            if WELCOME_PHOTO_PATH:
                with open(WELCOME_PHOTO_PATH, "rb") as ph:
                    bot.send_photo(ch, ph)
        except Exception:
            pass

        greet = (
            "üëã <b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ï–≤–∞!</b>\n\n"
            "–Ø –ø–æ–º–æ–≥—É –í–∞–º —Å–æ–∑–¥–∞—Ç—å —Å–∞–π—Ç\n"
            "–∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ!\n\n"
            "–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤."
        )
        bot.send_message(ch, greet, reply_markup=main_menu_kb(), parse_mode="HTML")

    # ===== –¢–µ–∫—Å—Ç–æ–≤—ã–µ –≤–≤–æ–¥—ã –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º =====
    @bot.message_handler(state=St.name, content_types=['text'])
    # [auto]: —Ñ—É–Ω–∫—Ü–∏—è in_name()
    def in_name(m):
        ch = m.chat.id
        USER[ch]["data"]["name"] = m.text.strip()
        clear_state(bot, ch)
        next_step(USER, ch)
        send_step(bot, USER, ch, cur_step(USER, ch))

    @bot.message_handler(state=St.org_name, content_types=['text'])
    # [auto]: —Ñ—É–Ω–∫—Ü–∏—è in_org_name()
    def in_org_name(m):
        ch = m.chat.id
        USER[ch]["data"]["org_name"] = m.text.strip()
        clear_state(bot, ch)
        next_step(USER, ch)
        send_step(bot, USER, ch, cur_step(USER, ch))

    @bot.message_handler(state=St.has_site_comment, content_types=['text'])
    # [auto]: —Ñ—É–Ω–∫—Ü–∏—è in_has_site_comment()
    def in_has_site_comment(m):
        ch = m.chat.id
        USER[ch]["data"]["has_site_comment"] = m.text.strip()
        clear_state(bot, ch)
        next_step(USER, ch)
        send_step(bot, USER, ch, cur_step(USER, ch))

    @bot.message_handler(state=St.product, content_types=['text'])
    # [auto]: —Ñ—É–Ω–∫—Ü–∏—è in_product()
    def in_product(m):
        ch = m.chat.id
        USER[ch]["data"]["product"] = m.text.strip()
        clear_state(bot, ch)
        next_step(USER, ch)
        send_step(bot, USER, ch, cur_step(USER, ch))

    @bot.message_handler(state=St.biz_goal, content_types=['text'])
    # [auto]: —Ñ—É–Ω–∫—Ü–∏—è in_biz_goal()
    def in_biz_goal(m):
        ch = m.chat.id
        USER[ch]["data"]["biz_goal"] = m.text.strip()
        clear_state(bot, ch)
        next_step(USER, ch)
        send_step(bot, USER, ch, cur_step(USER, ch))

    @bot.message_handler(state=St.user_action, content_types=['text'])
    # [auto]: —Ñ—É–Ω–∫—Ü–∏—è in_user_action()
    def in_user_action(m):
        ch = m.chat.id
        USER[ch]["data"]["user_action"] = m.text.strip()
        clear_state(bot, ch)
        next_step(USER, ch)
        send_step(bot, USER, ch, cur_step(USER, ch))

    @bot.message_handler(state=St.other_input, content_types=['text'])
    # [auto]: —Ñ—É–Ω–∫—Ü–∏—è in_other_input()
    def in_other_input(m):
        ch = m.chat.id
        set_other_value(USER[ch], m.text.strip())
        clear_state(bot, ch)
        step = multiselect_state(USER[ch]).get("step") or cur_step(USER, ch)
        send_step(bot, USER, ch, step)

    @bot.message_handler(state=St.contacts, content_types=['text'])
    # [auto]: —Ñ—É–Ω–∫—Ü–∏—è in_contacts_text()
    def in_contacts_text(m):
        ch = m.chat.id
        from kp_bot.utils import parse_contacts, format_contacts
        parsed = parse_contacts(m.text, tg_username=m.from_user.username)
        USER[ch]["data"]["contacts"] = format_contacts(parsed)
        clear_state(bot, ch)
        next_step(USER, ch)
        send_step(bot, USER, ch, cur_step(USER, ch))

    # –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –∫–Ω–æ–ø–∫–æ–π
    @bot.message_handler(content_types=['contact'], state=St.contacts)
    # [auto]: —Ñ—É–Ω–∫—Ü–∏—è in_contact_obj()
    def in_contact_obj(m):
        ch = m.chat.id
        from kp_bot.utils import parse_contacts, format_contacts
        parsed = parse_contacts("", tg_username=m.from_user.username, phone_from_share=(m.contact.phone_number if m.contact else None))
        USER[ch]["data"]["contacts"] = format_contacts(parsed)
        safe_delete(bot, ch, m.message_id)
        send_temp(bot, ch, "‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω!", ttl=3, reply_markup=types.ReplyKeyboardRemove())
        next_step(USER, ch)
        send_step(bot, USER, ch, cur_step(USER, ch))

    # ===== –í—Å–µ callback-–∏ =====
    @bot.callback_query_handler(func=lambda c: True)
    # [auto]: –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ on_cb()
    def on_cb(c):
        ch, mid, data = c.message.chat.id, c.message.message_id, c.data
        if ch not in USER:
            init_user(USER, ch)
        set_last_mid(USER, ch, mid)

        # –ù–∞–≤–∏–≥–∞—Ü–∏—è
        if data == "ui_back":
            go_back(bot, USER, ch, mid)
            return
        if data == "ui_home":
            safe_edit_text(bot, ch, mid, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", main_menu_kb())
            return

        # –û—Ç–≤–µ—Ç–∏–º –Ω–∞ –∫–æ–ª–±—ç–∫, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"
        try:
            bot.answer_callback_query(c.id)
        except Exception:
            pass

        # –°—Ç–∞—Ä—Ç / –û –±–æ—Ç–µ
        if data == "act_start":
            init_user(USER, ch)
            send_step(bot, USER, ch, 'name', mid, edit=True)
            return
        if data == "act_about":
            about_text = (
                "‚ÑπÔ∏è <b>–û –±–æ—Ç–µ</b>\n\n"
                "1) –û—Ç–≤–µ—á–∞–µ—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã (‚âà3‚Äì5 –º–∏–Ω—É—Ç).\n"
                "2) –í—ã–±–∏—Ä–∞–µ—Ç–µ —Ä–µ—à–µ–Ω–∏–µ –∏ –Ω—É–∂–Ω—ã–µ –æ–ø—Ü–∏–∏.\n"
                "3) –ü–æ–ª—É—á–∞–µ—Ç–µ –≥–æ—Ç–æ–≤–æ–µ –ö–ü –≤ PDF."
            )
            about_kb = types.InlineKeyboardMarkup()
            about_kb.add(types.InlineKeyboardButton("üìù –ù–∞—á–∞—Ç—å", callback_data="act_start"))
            safe_edit_text(bot, ch, mid, about_text, about_kb)
            return

        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ (–ø—Ä–∏–º–µ—Ä: org_category —á–µ—Ä–µ–∑ cat_*)
        if data.startswith("cat_"):
            USER[ch]["data"]["org_category"] = {
                "cat_fl": "–§–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ",
                "cat_ip": "–ò–ü",
                "cat_ul": "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ",
                "cat_other": "–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç"
            }.get(data, "–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç")
            next_step(USER, ch)
            send_step(bot, USER, ch, cur_step(USER, ch), mid, edit=True)
            return

        # –ï—Å—Ç—å —Å–∞–π—Ç? (yn_* –Ω–∞ —à–∞–≥–µ has_site)
        if data in ("yn_yes", "yn_no") and cur_step(USER, ch) == "has_site":
            USER[ch].setdefault("data", {})["has_site"] = "–î–∞" if data == "yn_yes" else "–ù–µ—Ç"
            if data == "yn_yes":
                USER[ch]["flow"] = ["name", "org_name", "has_site", "has_site_comment", "contacts", "confirm"]
                set_step(USER, ch, "has_site_comment")
                bot.set_state(ch, St.has_site_comment, ch)
                prompt = framed("4. <b>–ß—Ç–æ –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è –≤ –≤–∞—à–µ–º —Å–∞–π—Ç–µ, –∏ —á—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å?</b>\n<i>–ù–∞–ø—Ä–∏–º–µ—Ä: ¬´–Ω—Ä–∞–≤–∏—Ç—Å—è –¥–∏–∑–∞–π–Ω, –Ω–æ –Ω–µ—Ç –∫–æ—Ä–∑–∏–Ω—ã¬ª.</i>")
                kb_back = types.InlineKeyboardMarkup()
                kb_back.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='ui_back'))
                safe_edit_text(bot, ch, mid, prompt, kb_back)
            else:
                USER[ch]["flow"] = ["name", "org_name", "has_site", "biz_goal", "user_action", "product", "solution"]
                set_step(USER, ch, "biz_goal")
                send_step(bot, USER, ch, "biz_goal", mid, edit=True)
            return

        # –¶–µ–ª–∏
        if data.startswith("goal_"):
            mapping = {
                "goal_sell": "–ü—Ä–æ–¥–∞–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –∏–ª–∏ —É—Å–ª—É–≥–∏",
                "goal_leads": "–°–æ–±–∏—Ä–∞—Ç—å –∑–∞—è–≤–∫–∏",
                "goal_info2": "–ò–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ —Ç–æ–≤–∞—Ä–∞—Ö –∏–ª–∏ —É—Å–ª—É–≥–∞—Ö",
                "goal_info": "–ò–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
                "goal_brand": "–ü–æ–≤—ã—à–∞—Ç—å —É–∑–Ω–∞–≤–∞–µ–º–æ—Å—Ç—å –±—Ä–µ–Ω–¥–∞",
            }
            if data == "goal_custom":
                bot.set_state(ch, St.biz_goal, ch)
                safe_edit_text(bot, ch, mid, "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∫–ª—é—á–µ–≤—É—é –∑–∞–¥–∞—á—É —Ç–µ–∫—Å—Ç–æ–º:", kb(add_back=True, add_home=True))
            else:
                USER[ch]["data"]["biz_goal"] = mapping.get(data, "")
                next_step(USER, ch)
                send_step(bot, USER, ch, cur_step(USER, ch), mid, edit=True)
            return

        # –¶–µ–ª–µ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
        if data.startswith("act_"):
            mapping = {
                "act_buy": "–ö—É–ø–∏—Ç—å",
                "act_call": "–ü–æ–∑–≤–æ–Ω–∏—Ç—å",
                "act_lead": "–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É",
                "act_sub": "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"
            }
            if data == "act_custom":
                bot.set_state(ch, St.user_action, ch)
                safe_edit_text(bot, ch, mid, "–£–∫–∞–∂–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ —Ç–µ–∫—Å—Ç–æ–º:", kb(add_back=True, add_home=True))
            else:
                USER[ch]["data"]["user_action"] = mapping.get(data, "")
                next_step(USER, ch)
                send_step(bot, USER, ch, cur_step(USER, ch), mid, edit=True)
            return

        # –í—ã–±–æ—Ä —Ä–µ—à–µ–Ω–∏—è
        if data.startswith("sol_"):
            label = {
                "sol_land": "–õ–µ–Ω–¥–∏–Ω–≥",
                "sol_shop": "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω",
                "sol_bot": "–ß–∞—Ç-–±–æ—Ç",
                "sol_corp": "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Å–∞–π—Ç",
                "sol_mkt": "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ (SEO/–∫–æ–Ω—Ç–µ–∫—Å—Ç)"
            }.get(data, "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ (SEO/–∫–æ–Ω—Ç–µ–∫—Å—Ç)")
            apply_branch_flow(USER, ch, label)
            next_step(USER, ch)
            send_step(bot, USER, ch, cur_step(USER, ch), mid, edit=True)
            return

        # –ú—É–ª—å—Ç–∏–≤—ã–±–æ—Ä: –ø–∞–≥–∏–Ω–∞—Ü–∏—è/–≤—ã–±–æ—Ä/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ/¬´—Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç¬ª
        if data.startswith("page::"):
            _, step, page = data.split("::")
            multiselect_state(USER[ch])["page"] = int(page)
            send_step(bot, USER, ch, step, mid, edit=True)
            return

        if data.startswith("opt::"):
            _, step, key = data.split("::")
            toggle_select(USER[ch], key)
            send_step(bot, USER, ch, step, mid, edit=True)
            return

        if data.startswith("done::"):
            _, step = data.split("::")
            save_multiselect(USER[ch])
            next_step(USER, ch)
            send_step(bot, USER, ch, cur_step(USER, ch), mid, edit=True)
            return

        if data.startswith("other::"):
            _, step = data.split("::")
            bot.set_state(ch, St.other_input, ch)
            safe_edit_text(bot, ch, mid, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç —Ç–µ–∫—Å—Ç–æ–º:", kb(add_back=True, add_home=True))
            return

        # –°–æ–∑–¥–∞—Ç—å –ö–ü
        if data == "go_pdf":
            path = make_pdf(USER[ch], out_dir="generated_kp")
            safe_edit_text(bot, ch, mid, f"–ì–æ—Ç–æ–≤–æ! –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: <code>{path}</code>")
            return