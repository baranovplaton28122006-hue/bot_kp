import os, re, logging
from datetime import datetime
from typing import List, Dict

import telebot
from telebot import types
import types as pytypes
from telebot.handler_backends import StatesGroup, State

from jinja2 import Template
import pdfkit
import html
import time
# =========================
# –õ–û–ì–ò
# =========================
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
log = logging.getLogger("kp-bot-branch")

# =========================
# –ù–ê–°–¢–†–û–ô–ö–ò
# =========================
TOKEN = os.getenv("TELEGRAM_TOKEN", 'TELEGRAM_TOKEN')

bot = telebot.TeleBot(TOKEN, parse_mode="HTML")
path_wkhtmltopdf = r"C:/Program Files/wkhtmltopdf/bin/wkhtmltopdf.exe"

config = pdfkit.configuration(wkhtmltopdf=path_wkhtmltopdf)

THEME = {"brand": "#2c5aa0", "muted": "#6b7280", "accent": "#10b981"}
EMOJI = {"start": "üìù", "about": "‚ÑπÔ∏è", "back": "‚¨ÖÔ∏è", "home": "üè†", "ok": "‚úÖ", "no": "‚ùå", "edit": "‚úçÔ∏è", "confirm": "‚úîÔ∏è",
         "info": "üìã", "check": "‚òëÔ∏è", "empty": "‚¨ú"}

# –°–∫–æ–ª—å–∫–æ –æ–ø—Ü–∏–π –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –æ–¥–Ω–æ–π ¬´—Å—Ç—Ä–∞–Ω–∏—Ü–µ¬ª

PAGE_SIZE = 5

# =========================
# SAFE EDIT
# =========================
def h(s: str) -> str:
    # –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ª—é–±–æ–≥–æ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    return html.escape(s or "", quote=False)

def safe_edit_text(chat_id: int, message_id: int, text: str, markup=None):
    try:
        bot.edit_message_text(text, chat_id, message_id, reply_markup=markup)
    except Exception as e:
        s = str(e).lower()
        if "message is not modified" in s:
            return
        if "message to edit not found" in s or "can't be edited" in s:
            bot.send_message(chat_id, text, reply_markup=markup)
            return
        raise

from threading import Timer

def safe_delete(chat_id: int, message_id: int):
    try:
        bot.delete_message(chat_id, message_id)
    except Exception:
        pass

def send_temp(chat_id: int, text: str, ttl: int = 5, reply_markup=None):
    msg = bot.send_message(chat_id, text, reply_markup=reply_markup)
    Timer(ttl, lambda: safe_delete(chat_id, msg.message_id)).start()
    return msg


# =========================
# FSM (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –≤–≤–æ–¥–æ–≤)
# =========================
class St(StatesGroup):
    name = State()
    org_name = State()
    org_category = State()
    has_site = State()
    has_site_comment = State()
    product = State()
    biz_goal = State()
    audience = State()
    user_action = State()
    contacts = State()
    other_input = State()  # —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≤–≤–æ–¥ "–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç"


# =========================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–û–ï: –†–ê–ú–ö–ê –î–õ–Ø –í–û–ü–†–û–°–û–í
# =========================
FRAME = "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"

def framed(text: str) -> str:
    return f"{text}"

def framed_bottom(text: str) -> str:
    # –≤–∞—Ä–∏–∞–Ω—Ç: –≤–æ–ø—Ä–æ—Å + –ª–∏–Ω–∏—è —Å–Ω–∏–∑—É (–Ω—É–∂–Ω–æ –¥–ª—è –æ–¥–Ω–æ–≥–æ —à–∞–≥–∞)
    return f"{text}\n{FRAME}"
# =========================
# –ö–ù–û–ü–ö–ò
# =========================
def kb(*rows, add_back=False, add_home=False):
    m = types.InlineKeyboardMarkup()
    for row in rows:
        m.row(*row)
    if add_back:
        m.row(types.InlineKeyboardButton(f"{EMOJI['back']} –ù–∞–∑–∞–¥", callback_data="ui_back"))
    return m
def main_menu_kb():
    return kb(
        [types.InlineKeyboardButton(f"{EMOJI['start']} –ù–∞—á–∞—Ç—å", callback_data="act_start")],
        [types.InlineKeyboardButton(f"{EMOJI['about']} –û –±–æ—Ç–µ", callback_data="act_about")]
    )


def yn_kb():
    # –î–∞ –∏ –ù–µ—Ç –≤ —Å—Ç–æ–ª–±–∏–∫
    return kb(
        [types.InlineKeyboardButton(f"{EMOJI['ok']} –î–∞", callback_data="yn_yes")],
        [types.InlineKeyboardButton(f"{EMOJI['no']} –ù–µ—Ç", callback_data="yn_no")],
        add_back=True, add_home=True
    )
def yn_kb_all_horizontal():
    back = types.InlineKeyboardButton(f"{EMOJI['back']} –ù–∞–∑–∞–¥", callback_data="ui_back")
    no   = types.InlineKeyboardButton(f"{EMOJI['no']} –ù–µ—Ç", callback_data="yn_no")
    yes  = types.InlineKeyboardButton(f"{EMOJI['ok']} –î–∞", callback_data="yn_yes")
    m = types.InlineKeyboardMarkup()
    m.row(back, no, yes)  # –≤—Å–µ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
    return m


# =========================
# –ü–†–û–ì–†–ï–°–° (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —Å—Ç–∞–±–∏–ª—å–Ω—ã–π —Ç–æ—Ç–∞–ª –∏ –µ–¥–∏–Ω–∞—è –¥–ª–∏–Ω–∞ –±–∞—Ä–∞)
# =========================

# =========================
# –î–ê–ù–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
# =========================
USER: Dict[int, dict] = {}  # chat_id -> dict

# –ë–∞–∑–æ–≤—ã–µ —à–∞–≥–∏ –¥–æ –≤—ã–±–æ—Ä–∞ –≤–µ—Ç–∫–∏
BASE_ORDER = [
    "name", "org_name", "has_site", "has_site_comment",
    "biz_goal", "user_action", "product", "solution",
]
COMMON_ORDER = ["design", "content", "timeline", "contacts", "confirm"]

# –í–µ—Ç–∫–∏
BRANCH_FLOW = {
    # –õ–µ–Ω–¥–∏–Ω–≥ / –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π ‚Äî –∫–æ—Ä–æ—Ç–∫–∏–µ –≤–µ—Ç–∫–∏ (–ø–æ 2 —à–∞–≥–∞)
    "A": ["A1_blocks", "A2_functions"],
    # –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω ‚Äî 3 —à–∞–≥–∞
    "B": ["B1_sections", "B2_assort", "B3_functions"],
    # –ß–∞—Ç-–±–æ—Ç ‚Äî 3 —à–∞–≥–∞
    "C": ["C1_tasks", "C2_platforms", "C3_integrations"],
    # –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ ‚Äî 3 —à–∞–≥–∞
    "D": ["D1_goals", "D2_channels", "D4_budget"],
}
BASE_FLOW   = BASE_ORDER.copy()
COMMON_FLOW = COMMON_ORDER.copy()

BASE_LEN    = len(BASE_ORDER)
BRANCH_MAX  = max(len(v) for v in BRANCH_FLOW.values())  # —É–±–µ–¥–∏—Å—å, —á—Ç–æ BRANCH_FLOW –æ–±—ä—è–≤–ª–µ–Ω –≤—ã—à–µ
COMMON_LEN  = len(COMMON_ORDER)
STABLE_TOTAL= BASE_LEN + BRANCH_MAX + COMMON_LEN

BASE_LEN = len(BASE_ORDER)                              # 8
BRANCH_MAX = max(len(v) for v in BRANCH_FLOW.values()) # 3
COMMON_LEN = len(COMMON_ORDER)                          # 5
STABLE_TOTAL = BASE_LEN + BRANCH_MAX + COMMON_LEN       # 8 + 3 + 5 = 16

def clear_state(ch: int):
    try:
        bot.delete_state(ch)  # —Å–±—Ä–æ—Å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ state —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    except Exception:
        pass

def init_user(ch: int):
    USER[ch] = {
        "idx": 0,
        "flow": BASE_ORDER.copy(),
        "data": {},
        "branch": None,
        "solution": None,
        "multiselect_ctx": {},
        "last_mid": None,                 # üëà —Å—é–¥–∞ –±—É–¥–µ–º –∫–ª–∞—Å—Ç—å id –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
    }

def get_last_mid(ch: int):
    return USER.get(ch, {}).get("last_mid")

def set_last_mid(ch: int, mid: int | None):
    if ch in USER:
        USER[ch]["last_mid"] = mid

def get_flow(ch: int) -> List[str]:
    return USER[ch]['flow']


def cur_step(ch: int) -> str:
    return get_flow(ch)[USER[ch]['idx']]


def set_step(ch: int, key: str):
    USER[ch]['idx'] = get_flow(ch).index(key)


def next_step(ch: int):
    USER[ch]['idx'] = min(USER[ch]['idx'] + 1, len(get_flow(ch)) - 1)


def total_steps(ch: int) -> int:
    return len(get_flow(ch))

def go_back(ch: int, mid: int | None):
    """
    –ï–¥–∏–Ω—ã–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π '–ù–∞–∑–∞–¥':
    - –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞ (biz_goal/user_action/other_input),
      –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º –∏–∑ state –∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —à–∞–≥ (–±–µ–∑ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π).
    - –∏–Ω–∞—á–µ: –æ—á–∏—â–∞–µ–º state –∏ —É—Ö–æ–¥–∏–º –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥ –ø–æ flow.
    """
    try:
        st = bot.get_state(ch, ch)  # –Ω–∞–ø—Ä–∏–º–µ—Ä 'St:biz_goal', 'St:other_input', ...
    except Exception:
        st = None

    st = (st or "").lower()

    # 1) –ö–∞—Å—Ç–æ–º–Ω—ã–π –≤–≤–æ–¥ –ø–æ –∫–Ω–æ–ø–∫–µ "–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç" –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —à–∞–≥–∞ (–º—É–ª—å—Ç–∏–≤—ã–±–æ—Ä)
    if st.endswith(":other_input"):
        step = multiselect_state(ch).get("step") or cur_step(ch)
        clear_state(ch)
        send_step(ch, step, mid=mid, edit=True)
        return

    # 2) –ö–∞—Å—Ç–æ–º–Ω—ã–π –≤–≤–æ–¥ –¥–ª—è "–ö–∞–∫—É—é –∑–∞–¥–∞—á—É —Ä–µ—à–∏—Ç—å" (biz_goal)
    if st.endswith(":biz_goal"):
        clear_state(ch)
        send_step(ch, "biz_goal", mid=mid, edit=True)
        return

    # 3) –ö–∞—Å—Ç–æ–º–Ω—ã–π –≤–≤–æ–¥ –¥–ª—è "–¶–µ–ª–µ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ" (user_action)
    if st.endswith(":user_action"):
        clear_state(ch)
        send_step(ch, "user_action", mid=mid, edit=True)
        return

    # 4) –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–≤–∫–ª—é—á–∞—è has_site_comment, contacts –∏ —Ç.–ø.) ‚Äî –∏–¥—ë–º –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥
    clear_state(ch)
    USER[ch]["idx"] = max(0, USER[ch]["idx"] - 1)
    send_step(ch, cur_step(ch), mid=mid, edit=True)

# =========================
# –°–¢–ê–ë–ò–õ–¨–ù–´–ô –¢–û–¢–ê–õ –ò –ö–ê–†–¢–ê –ò–ù–î–ï–ö–°–û–í –î–õ–Ø –ü–†–û–ì–†–ï–°–°–ê
# =========================
def _planned_total_const() -> int:
    base_len = len(BASE_FLOW)
    b_max = max(len(v) for v in BRANCH_FLOW.values())
    comm_len = len(COMMON_FLOW)
    return base_len + b_max + comm_len

def progress_for_step(ch: int, step_key: str):
    base_len = len(BASE_FLOW)
    b_max = max(len(v) for v in BRANCH_FLOW.values())
    total = base_len + b_max + len(COMMON_FLOW)

    branch = USER.get(ch, {}).get("branch")
    if not branch:
        # –µ—â—ë –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –≤–µ—Ç–∫–∞ ‚Äî –ø–æ–∑–∏—Ü–∏—è –≤ BASE
        if step_key in BASE_FLOW:
            idx_in_base = BASE_FLOW.index(step_key) + 1
        else:
            # –µ—Å–ª–∏ –≤—ã–∑—ã–≤–∞—é—Ç –¥–ª—è —à–∞–≥–∞ –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ BASE –¥–æ –≤—ã–±–æ—Ä–∞ –≤–µ—Ç–∫–∏ ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ñ–æ–ª–±–µ–∫
            idx_in_base = min(base_len, USER.get(ch, {}).get("idx", 0) + 1)
        return idx_in_base, total

    if step_key in BASE_FLOW:
        return BASE_FLOW.index(step_key) + 1, total

    if step_key in BRANCH_FLOW[branch]:
        i = BRANCH_FLOW[branch].index(step_key) + 1
        sel_len = len(BRANCH_FLOW[branch])
        # —Ö–æ—Ç–∏–º: i=1 -> scaled=1 (–≤—Å–µ–≥–¥–∞ 9/total), i=sel_len -> scaled=b_max
        if sel_len <= 1:
            scaled = 1
        else:
            scaled = 1 + round((i - 1) * (b_max - 1) / (sel_len - 1))
        return base_len + scaled, total

    if step_key in COMMON_FLOW:
        i = COMMON_FLOW.index(step_key) + 1
        return base_len + b_max + i, total

    # fallback ‚Äî –ø–æ —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª–æ–∂–µ–Ω–∏—é
    return min(len(get_flow(ch)), get_flow(ch).index(step_key) + 1 if step_key in get_flow(ch) else USER[ch]['idx'] + 1), total


def step_no(ch: int, step_key: str) -> int:
    """–ü–æ–∑–∏—Ü–∏—è —à–∞–≥–∞ –≤ –¢–ï–ö–£–©–ï–ú –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º –º–∞—Ä—à—Ä—É—Ç–µ (1..len(flow))."""
    flow = get_flow(ch) if ch in USER else []
    if step_key in flow:
        return flow.index(step_key) + 1
    return USER.get(ch, {}).get("idx", 0) + 1  # –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ñ–æ–ª–±—ç–∫

def numbered_title(ch: int, step_key: str, text_html: str) -> str:
    return f"{step_no(ch, step_key)}. {text_html}"

# =========================
# –ü–†–û–ì–†–ï–°–° ‚Üí –°–ß–Å–¢–ß–ò–ö –®–ê–ì–û–í
# =========================
# –µ–¥–∏–Ω–∞—è –∫–∞—Ä—Ç–∞ —à–∞–≥–æ–≤ (—Ñ—Ä–∞–≥–º–µ–Ω—Ç)
STEP_ORDER = [
    "name", "org_name",
    "has_site", "has_site_comment",   # üëà –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π = 4/16
    "biz_goal", "user_action", "solution",
    "A1_blocks", "A2_functions",
    "B1_sections", "B2_assort", "B3_functions",
    "C1_tasks", "C2_platforms", "C3_integrations",
    "D1_goals", "D2_channels", "D4_budget",
    "design", "content", "timeline", "contacts", "confirm"
]
STEP_INDEX = {k: i+1 for i, k in enumerate(STEP_ORDER)}
TOTAL_STEPS = len(STEP_ORDER)
def render_for_step(ch: int, step_key: str) -> str:
    return ""  # –æ—Ç–∫–ª—é—á–µ–Ω–æ –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é: —Å–∫—Ä—ã—Ç—å 1/16 –∏ —Ç.–ø.

# =========================
# –û–ü–¶–ò–ò –ü–û –¢–ó
# =========================
# A1: –ª–µ–Ω–¥–∏–Ω–≥/–∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π
A1_LANDING = [
    ("hero",      "–ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω (–∑–∞–≥–æ–ª–æ–≤–æ–∫)"),
    ("benefits",  "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ / –ü–æ—á–µ–º—É –º—ã"),
    ("contact",   "–§–æ—Ä–º–∞ —Å–≤—è–∑–∏ / –ö–æ–Ω—Ç–∞–∫—Ç—ã"),
    ("gallery",   "–ì–∞–ª–µ—Ä–µ—è / –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ"),
    ("about",     "–û –Ω–∞—Å / –û –∫–æ–º–ø–∞–Ω–∏–∏"),
    ("products",  "–£—Å–ª—É–≥–∏ / –ø—Ä–æ–¥—É–∫—Ç—ã"),
    ("reviews",   "–û—Ç–∑—ã–≤—ã –∫–ª–∏–µ–Ω—Ç–æ–≤"),
]
A1_CORP = [
    ("services",  "–£—Å–ª—É–≥–∏ (–∏–ª–∏ –∫–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥)"),
    ("faq",       "FAQ (–≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã)"),
    ("cases",     "–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ / –ö–µ–π—Å—ã"),
    ("prices",    "–¶–µ–Ω—ã / –ü—Ä–∞–π—Å-–ª–∏—Å—Ç"),
    ("home",      "–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"),
    ("blog",      "–ë–ª–æ–≥ / –ù–æ–≤–æ—Å—Ç–∏"),
    ("about",     "–û –∫–æ–º–ø–∞–Ω–∏–∏"),
    ("contacts",  "–ö–æ–Ω—Ç–∞–∫—Ç—ã"),
    ("team",      "–ö–æ–º–∞–Ω–¥–∞"),
]
A2_FUNCTIONS = [
    ("booking",   "–û–Ω–ª–∞–π–Ω-–∑–∞–ø–∏—Å—å / –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"),
    ("social",    "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–æ—Ü—Å–µ—Ç—è–º–∏"),
    ("lk",        "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞"),
    ("form",      "–§–æ—Ä–º–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"),
    ("chat",      "–ß–∞—Ç —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"),
]

# B
B1_SECTIONS = [
    ("pdp",       "–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç–æ–≤–∞—Ä–∞ (–æ–ø–∏—Å–∞–Ω–∏–µ/—Ñ–æ—Ç–æ/—Ü–µ–Ω–∞)"),
    ("reviews",   "–û—Ç–∑—ã–≤—ã –æ —Ç–æ–≤–∞—Ä–∞—Ö –∏–ª–∏ –º–∞–≥–∞–∑–∏–Ω–µ"),
    ("home",      "–í–∏—Ç—Ä–∏–Ω–∞ —Å –∞–∫—Ü–∏—è–º–∏/–Ω–æ–≤–∏–Ω–∫–∞–º–∏"),
    ("lk",        "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è"),
    ("faq",       "FAQ (–≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã)"),
    ("about",     "–û –∫–æ–º–ø–∞–Ω–∏–∏ / –û –Ω–∞—Å"),
    ("delivery",  "–î–æ—Å—Ç–∞–≤–∫–∞ –∏ –æ–ø–ª–∞—Ç–∞"),
    ("catalog",   "–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤"),
    ("blog",      "–ë–ª–æ–≥ / –°—Ç–∞—Ç—å–∏"),
    ("contacts",  "–ö–æ–Ω—Ç–∞–∫—Ç—ã"),
    ("home",      "–ì–ª–∞–≤–Ω–∞—è"),
    ("cart",      "–ö–æ—Ä–∑–∏–Ω–∞"),
]
B2_ASSORT = [
    ("m",         "–û–∫–æ–ª–æ 100‚Äì200 —Ç–æ–≤–∞—Ä–æ–≤"),
    ("l",         "–ë–æ–ª–µ–µ 200 —Ç–æ–≤–∞—Ä–æ–≤"),
    ("s",         "–î–æ 50 —Ç–æ–≤–∞—Ä–æ–≤"),
    ("unknown",   "–ü–æ–∫–∞ –Ω–µ –∑–Ω–∞—é"),
]
B3_FUNCTIONS = [
    ("fast",      "–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –≤ 1 –∫–ª–∏–∫"),
    ("filters",   "–§–∏–ª—å—Ç—Ä—ã –∏ –ø–æ–∏—Å–∫ –ø–æ —Ç–æ–≤–∞—Ä–∞–º"),
    ("lk",        "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è"),
    ("ratings",   "–û—Ç–∑—ã–≤—ã –∏ —Ä–µ–π—Ç–∏–Ω–≥–∏"),
    ("compare",   "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤"),
]

# C
C1_TASKS = [
    ("booking_msg",    "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–µ"),
    ("faq",            "–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã (FAQ)"),
    ("tracking",       "–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏"),
    ("selection",      "–ü–æ–¥–±–æ—Ä —Ç–æ–≤–∞—Ä–∞ / —É—Å–ª—É–≥"),
    ("subs_base",      "–°–±–æ—Ä –±–∞–∑—ã –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"),
    ("promo",          "–ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∞–∫—Ü–∏–π"),
    ("record_service", "–ó–∞–ø–∏—Å—å –Ω–∞ —É—Å–ª—É–≥—É"),
    ("record_visit",   "–ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏—ë–º"),
    ("orders",         "–ü—Ä–∏—ë–º –∑–∞–∫–∞–∑–æ–≤"),
    ("status",         "–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞"),
    ("consult",        "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"),
]
C2_PLATFORMS = [
    ("site",           "–°–∞–π—Ç (–≤–∏–¥–∂–µ—Ç —á–∞—Ç-–±–æ—Ç–∞)"),
    ("vk",             "–í–ö–æ–Ω—Ç–∞–∫—Ç–µ"),
    ("wa",             "WhatsApp"),
    ("tg",             "Telegram"),
    ("vb",             "Viber"),
]
C3_INTEGR = [
    ("crm",      "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CRM"),
    ("delivery", "–°–ª—É–∂–±—ã –¥–æ—Å—Ç–∞–≤–∫–∏ / —Ç—Ä–µ–∫–∏–Ω–≥"),
    ("db",       "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"),
    ("pay",      "–ü–ª–∞—Ç–µ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã"),
    ("ga",       "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"),
    ("mess",     "–ß–∞—Ç –∏–ª–∏ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä—ã"),
    ("ml",       "–ú–Ω–æ–≥–æ—è–∑—ã—á–Ω–æ—Å—Ç—å"),
]

# D
D1_GOALS = [
    ("audit",          "–ü–æ–Ω—è—Ç—å, —á—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ç–µ–∫—É—â–µ–º –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–∏ (–∞—É–¥–∏—Ç)"),
    ("leads",          "–£–≤–µ–ª–∏—á–∏—Ç—å –ø–æ—Ç–æ–∫ –∑–∞—è–≤–æ–∫ –∏ –ø—Ä–æ–¥–∞–∂ (–ª–∏–¥—ã)"),
    ("strategy",       "–†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é"),
    ("ads_setup",      "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∫–ª–∞–º—ã (–Ø–Ω–¥–µ–∫—Å/Google)"),
    ("brand",          "–ü–æ–≤—ã—Å–∏—Ç—å —É–∑–Ω–∞–≤–∞–µ–º–æ—Å—Ç—å –±—Ä–µ–Ω–¥–∞"),
    ("seo",            "SEO: —É–ª—É—á—à–∏—Ç—å –ø–æ–∑–∏—Ü–∏–∏ —Å–∞–π—Ç–∞"),
    ("leads",          "–£–≤–µ–ª–∏—á–∏—Ç—å –ø—Ä–æ–¥–∞–∂–∏"),
    ("social",         "–†–∞–∑–≤–∏—Ç–∏–µ —Å–æ—Ü—Å–µ—Ç–µ–π"),
    ("ads_manage",     "–í–µ–¥–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã"),
]
D2_CHANNELS = [
    ("seo",                 "–ü–æ–∏—Å–∫–æ–≤–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è (SEO)"),
    ("ads",                 "–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞"),
    ("content_marketing",   "–ö–æ–Ω—Ç–µ–Ω—Ç-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥"),
    ("target",              "–¢–∞—Ä–≥–µ—Ç –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö"),
    ("email",               "Email-—Ä–∞—Å—Å—ã–ª–∫–∏"),
    ("articles",            "–°—Ç–∞—Ç—å–∏"),
    ("blog",                "–ë–ª–æ–≥"),
]
D3_CURRENT = [
    ("ads_no_result",       "–ï—Å—Ç—å —Å–∞–π—Ç/—Ä–µ–∫–ª–∞–º–∞(–Ω–µ—Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏–≤–Ω–æ)"),
    ("nothing",             "–ù–∏—á–µ–≥–æ –Ω–µ—Ç, –Ω–∞—á–∏–Ω–∞–µ–º —Å –Ω—É–ª—è"),
    ("site_no_ads",         "–ï—Å—Ç—å —Å–∞–π—Ç, –Ω–æ –Ω–µ—Ç —Ä–µ–∫–ª–∞–º—ã"),
    ("no_site_social",      "–ù–µ—Ç —Å–∞–π—Ç–∞, –Ω—É–∂–Ω–∞ —Ä–µ–∫–ª–∞–º–∞"),
]
D4_BUDGET = [
    ("lt50",                "–î–æ 50 000 ‚ÇΩ/–º–µ—Å"),
    ("50-100",              "50 000‚Äì100 000 ‚ÇΩ/–º–µ—Å"),
    ("gt100",               "–ë–æ–ª–µ–µ 100 000 ‚ÇΩ/–º–µ—Å"),
    ("advise",              "–ü—Ä–µ–¥–ª–æ–∂–∏—Ç–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç"),
]
# –û–±—â–∏–µ
DESIGN = [
    ("tpl",            "–ì–æ—Ç–æ–≤—ã–π —à–∞–±–ª–æ–Ω"),
    ("uniq",           "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –¥–∏–∑–∞–π–Ω"),
    ("advise",         "–ü–æ—Å–æ–≤–µ—Ç—É–π—Ç–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç")
]
CONTENT = [
    ("client",        "–í—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç"),
    ("help",          "–ü–æ–º–æ—â—å —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞"),
    ("mix",           "–°–º–µ—à–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç")
]

def _optmap(options):
    return {k: v for k, v in options}

LABELS = {
    # A
    "A1_blocks": (_optmap(A1_LANDING) | _optmap(A1_CORP)),
    "A2_functions": _optmap(A2_FUNCTIONS),

    # B
    "B1_sections": _optmap(B1_SECTIONS),
    "B2_assort": _optmap(B2_ASSORT),
    "B3_functions": _optmap(B3_FUNCTIONS),

    # C
    "C1_tasks": _optmap(C1_TASKS),
    "C2_platforms": _optmap(C2_PLATFORMS),
    "C3_integrations": _optmap(C3_INTEGR),

    # D
    "D4_budget": {
        "lt50": "–î–æ 50 000 ‚ÇΩ/–º–µ—Å",
        "50-100": "50 000‚Äì100 000 ‚ÇΩ/–º–µ—Å",
        "gt100": "–ë–æ–ª–µ–µ 100 000 ‚ÇΩ/–º–µ—Å",
        "advise": "–ü—Ä–µ–¥–ª–æ–∂–∏—Ç–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç",
    },

    # –û–±—â–∏–µ
    "design": _optmap(DESIGN),
    "content": _optmap(CONTENT),
    "timeline": {
        "1-2w": "1‚Äì2 –Ω–µ–¥–µ–ª–∏",
        "2-4w": "2‚Äì4 –Ω–µ–¥–µ–ª–∏",
        "1-2m": "1‚Äì2 –º–µ—Å—è—Ü–∞",
        "2-4m": "2‚Äì4 –º–µ—Å—è—Ü–∞",
    },
}

def humanize_list(step: str, keys: list[str]) -> list[str]:
    mp = LABELS.get(step, {})
    return [mp.get(k, k) for k in (keys or [])]

def humanize_dict(step: str, dct: dict | None) -> str:
    """–ò–∑ {'items':[...],'other':...} –¥–µ–ª–∞–µ—Ç –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π HTML —Å–æ ¬´—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–º–∏¬ª –ø–æ–¥–ø–∏—Å—è–º–∏."""
    if not dct:
        return ""
    items = humanize_list(step, dct.get("items", []))
    if dct.get("other"):
        items.append(f"–î—Ä—É–≥–æ–µ: {dct['other']}")
    return "<br>‚Ä¢ " + "<br>‚Ä¢ ".join(items) if items else ""




# =========================
# –ú–£–õ–¨–¢–ò–í–´–ë–û–† —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
# =========================
def multiselect_state(ch: int):
    """–ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –≤–µ—Ä–Ω—É—Ç—å —Å–ª–æ–≤–∞—Ä—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –º—É–ª—å—Ç–∏–≤—ã–±–æ—Ä–∞."""
    ctx = USER[ch].get("multiselect_ctx")
    if not isinstance(ctx, dict):
        ctx = {"step": None, "selected": set(), "single": False, "preset": None, "page": 0}
        USER[ch]["multiselect_ctx"] = ctx
    ctx.setdefault("step", None)
    ctx.setdefault("selected", set())
    ctx.setdefault("single", False)
    ctx.setdefault("preset", None)
    ctx.setdefault("page", 0)
    return ctx


def start_multiselect(ch: int, step: str, single: bool = False, preset: List[str] = None, seed: List[str] = None):
    ctx = multiselect_state(ch)
    ctx["step"] = step
    ctx["single"] = single
    ctx["preset"] = preset or []
    ctx["selected"] = set(seed or [])
    ctx["page"] = 0  # –≤—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã


def ensure_multiselect(ch: int, step: str, single: bool = False):
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¢–û–õ–¨–ö–û –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ –≤ —à–∞–≥.
    –ï—Å–ª–∏ –≤—ã–±–æ—Ä —Ä–∞–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω ‚Äî –ø–æ–¥—Ö–≤–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ, –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞—è –≥–∞–ª–æ—á–∫–∏.
    """
    ctx = multiselect_state(ch)
    if ctx["step"] != step:
        prev_items = USER[ch]["data"].get(step, {}).get("items", [])
        start_multiselect(ch, step, single=single, seed=prev_items)
    else:
        ctx["single"] = single  # —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Ä–µ–∂–∏–º

from telebot import types

def bottom_row_for_step(step: str, add_back=True, add_other=False, add_done=False):
    row = []
    if add_back:
        row.append(types.InlineKeyboardButton(f"{EMOJI['back']} –ù–∞–∑–∞–¥", callback_data="ui_back"))
    if add_other:
        row.append(types.InlineKeyboardButton("üìù –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", callback_data=f"other::{step}"))
    if add_done:
        row.append(types.InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data=f"done::{step}"))
    return row

def toggle_select(ch: int, key: str):
    ctx = multiselect_state(ch)
    if ctx["single"]:
        ctx["selected"] = set([key])
    else:
        if key in ctx["selected"]:
            ctx["selected"].remove(key)
        else:
            ctx["selected"].add(key)


def set_other_value(ch: int, text: str):
    d = USER[ch]["data"]
    step = multiselect_state(ch)["step"]
    d.setdefault(step, {"items": [], "other": None})
    d[step]["other"] = text


def save_multiselect(ch: int):
    ctx = multiselect_state(ch)
    d = USER[ch]["data"]
    d[ctx["step"]] = {"items": list(ctx["selected"]), "other": d.get(ctx["step"], {}).get("other")}
    return d[ctx["step"]]


def selected_marker(ch: int, key: str) -> str:
    return EMOJI['check'] if key in multiselect_state(ch)["selected"] else EMOJI['empty']


def build_paginated_rows(ch: int, step: str, options, page: int,
                         add_other_text: str = None, add_preset: bool = False):
    rows = []
    start = page * PAGE_SIZE
    end = min(len(options), start + PAGE_SIZE)

    # –û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø—Ü–∏–∏ ‚Äî –≤—Å–µ–≥–¥–∞ –≤ —Å—Ç–æ–ª–±–∏–∫
    for key, label in options[start:end]:
        btn = types.InlineKeyboardButton(
            f"{selected_marker(ch, key)} {label}",
            callback_data=f"opt::{step}::{key}"
        )
        rows.append([btn])

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    if page > 0:
        rows.append([types.InlineKeyboardButton("‚óÄÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã", callback_data=f"page::{step}::{page-1}")])
    if end < len(options):
        rows.append([types.InlineKeyboardButton("–ï—â–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã ‚ñ∂Ô∏è", callback_data=f"page::{step}::{page+1}")])

    # –ü—Ä–µ—Å–µ—Ç ‚Äî –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π
    if add_preset:
        rows.append([types.InlineKeyboardButton("–ü—Ä–µ–¥–ª–æ–∂–∏—Ç–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –Ω–∞–±–æ—Ä",
                                                callback_data=f"preset::{step}")])
    # ¬´–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç¬ª + ¬´–ì–æ—Ç–æ–≤–æ¬ª ‚Äî –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
    if add_other_text:
        other_btn = types.InlineKeyboardButton(add_other_text, callback_data=f"other::{step}")
        done_btn  = types.InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ", callback_data=f"done::{step}")
        rows.append([other_btn, done_btn])
    else:
        rows.append([types.InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ", callback_data=f"done::{step}")])

    return rows

def kb_with_bottom(rows, back=False, other_cd=None, done_cd=None, other_text="üìù –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", done_text="‚úÖ –ì–æ—Ç–æ–≤–æ"):
    m = types.InlineKeyboardMarkup()
    for r in rows:
        m.row(*r)
    bottom = []
    if back:
        bottom.append(types.InlineKeyboardButton(f"{EMOJI['back']} –ù–∞–∑–∞–¥", callback_data="ui_back"))
    if other_cd:
        bottom.append(types.InlineKeyboardButton(other_text, callback_data=other_cd))
    if done_cd:
        bottom.append(types.InlineKeyboardButton(done_text, callback_data=done_cd))
    if bottom:
        m.row(*bottom)
    return m

def pretty_human(step: str, entry) -> str:
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç –∫–æ–¥—ã –≤ —Ä—É—Å—Å–∫–∏–µ –ø–æ–¥–ø–∏—Å–∏ —á–µ—Ä–µ–∑ LABELS."""
    if not entry:
        return "‚Äî"
    if isinstance(entry, dict) and "items" in entry:
        items = humanize_list(step, entry["items"])
        text = ", ".join(items)
        if entry.get("other"):
            text += f"; –î—Ä—É–≥–æ–µ: {entry['other']}"
        return text
    return str(entry)

def multiselect_screen(ch: int, step: str, title_html: str, options,
                       single: bool = False, add_other_text: str = None, add_preset: bool = False):
    ensure_multiselect(ch, step, single=single)
    page = multiselect_state(ch)["page"]

    rows = build_paginated_rows(
        ch, step, options, page,
        add_other_text=add_other_text, add_preset=add_preset
    )

    # –¥–æ—Å—Ç–∞–Ω–µ–º –∏–∑ rows ¬´–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç¬ª –∏ ¬´–ì–æ—Ç–æ–≤–æ¬ª, —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å –∏—Ö –≤–º–µ—Å—Ç–µ —Å ¬´–ù–∞–∑–∞–¥¬ª
    other_btn = None
    done_btn = None
    for r in rows:
        for btn in list(r):
            cd = getattr(btn, "callback_data", "") or ""
            if cd.startswith("other::") and other_btn is None:
                other_btn = btn
                r.remove(btn)
            elif cd.startswith("done::") and done_btn is None:
                done_btn = btn
                r.remove(btn)

    # –Ω–∏–∂–Ω–∏–π –æ–±—â–∏–π —Ä—è–¥ (‚¨Ö –ù–∞–∑–∞–¥ | üìù –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç | ‚úÖ –ì–æ—Ç–æ–≤–æ)
    bottom = bottom_row_for_step(
        step,
        add_back=True,
        add_other=(other_btn is not None),
        add_done=(done_btn is not None),
    )

    # (–∫–Ω–æ–ø–∫–∏ ¬´–ù–∞–∑–∞–¥¬ª —É –Ω–∞—Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ, ¬´–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç/–ì–æ—Ç–æ–≤–æ¬ª –º–æ–≥ –±—ã—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–º –ø–æ —Å—Ç–∏–ª—é)
    if other_btn is not None:
        bottom[1] = other_btn  # –Ω–∞ –º–µ—Å—Ç–µ ¬´–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç¬ª
    if done_btn is not None:
        bottom[-1] = done_btn  # –Ω–∞ –º–µ—Å—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª

    rows.append(bottom)

    m = types.InlineKeyboardMarkup()
    for r in rows:
        if r:
            m.row(*r)

    text = f"{render_for_step(ch, step)}{framed(f'<b>{title_html}</b>')}"
    return text, m

# =========================
# –¢–ï–ö–°–¢ –ü–û–ú–û–©–ò/–û–ü–ò–°–ê–ù–ò–Ø
# =========================
SERVICES_INFO = (
    "<b>–û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥:</b>\n\n"
    "‚Ä¢ <b>–õ–µ–Ω–¥–∏–Ω–≥</b> ‚Äî –æ–¥–Ω–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π —Å–∞–π—Ç –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –ø—Ä–æ–¥–∞–∂ –∏ –∑–∞—è–≤–æ–∫.\n"
    "‚Ä¢ <b>–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω</b> ‚Äî –∫–∞—Ç–∞–ª–æ–≥, –∫–æ—Ä–∑–∏–Ω–∞, –æ–ø–ª–∞—Ç–∞ –∏ –¥–æ—Å—Ç–∞–≤–∫–∞.\n"
    "‚Ä¢ <b>–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Å–∞–π—Ç</b> ‚Äî —Ä–∞–∑–¥–µ–ª—ã –æ –∫–æ–º–ø–∞–Ω–∏–∏, —É—Å–ª—É–≥–∞—Ö, –∫–µ–π—Å–∞—Ö.\n"
    "‚Ä¢ <b>–ß–∞—Ç-–±–æ—Ç</b> ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤/–∑–∞—è–≤–æ–∫.\n"
    "‚Ä¢ <b>–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥</b> ‚Äî SEO –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞."
)


# =========================
# –†–ï–ù–î–ï–† –®–ê–ì–û–í (—Å–æ —Å—Ç–∏–ª–µ–º ¬´–≤ —Ä–∞–º–∫–µ¬ª) ‚Äî –í–°–ï –ö–ù–û–ü–ö–ò –í –°–¢–û–õ–ë–ò–ö + –ü–ê–ì–ò–ù–ê–¶–ò–Ø
# =========================
def send_step(ch: int, step_key: str, mid: int = None, edit: bool = False):
    flow = get_flow(ch)

    # –ª–æ–∫–∞–ª—å–Ω—ã–π –∞–ª–∏–∞—Å –Ω—É–º–µ—Ä–∞—Ü–∏–∏: –≤—Å–µ–≥–¥–∞ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç ch
    def NT(step: str, text_html: str) -> str:
        return numbered_title(ch, step, text_html)

    def _send(text, markup=None):
        if edit and mid:
            try:
                safe_edit_text(ch, mid, text, markup)
                set_last_mid(ch, mid)
                return
            except Exception:
                pass
        m = bot.send_message(ch, text, reply_markup=markup)
        set_last_mid(ch, m.message_id)

    # ===== –ë–ê–ó–û–í–´–ï =====
    if step_key == 'name':
        bot.set_state(ch, St.name, ch)
        title = NT('name', '<b>–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ—Å—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫ –í–∞—Å –∑–æ–≤—É—Ç?</b>')
        _send(f"{render_for_step(ch, 'name')}{framed(title)}\n")
        return

    if step_key == 'org_name':
        bot.set_state(ch, St.org_name, ch)
        title = NT('org_name', '<b>–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤–∞—à–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è?</b>')
        _send(f"{render_for_step(ch, 'org_name')}{framed(title)}", kb(add_back=True, add_home=True))
        return

    if step_key == 'org_category':
        bot.set_state(ch, St.org_category, ch)
        title = NT('org_category', '<b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:</b>')
        _send(
            f"{render_for_step(ch, 'org_category')}{framed(title)}",
            kb(
                [types.InlineKeyboardButton("–Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ", callback_data="cat_ul")],
                [types.InlineKeyboardButton("–§–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ", callback_data="cat_fl")],
                [types.InlineKeyboardButton("–ò–ü", callback_data="cat_ip")],
                add_back=True, add_home=True
            )
        )
        return

    if step_key == 'has_site':
        clear_state(ch)
        bot.set_state(ch, St.has_site, ch)
        title = NT('has_site', '<b>–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Å–∞–π—Ç?</b>')
        _send(f"{render_for_step(ch, 'has_site')}{framed(title)}", yn_kb_all_horizontal())
        return

    if step_key == 'product':
        bot.set_state(ch, St.product, ch)
        title = NT('product', '<b>–ö–∞–∫–æ–π –ø—Ä–æ–¥—É–∫—Ç –∏–ª–∏ —É—Å–ª—É–≥—É –í—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø—Ä–æ–¥–≤–∏–≥–∞—Ç—å?</b>')
        _send(f"{render_for_step(ch, 'product')}{framed(title)}", kb(add_back=True, add_home=True))
        return

    if step_key == 'biz_goal':
        clear_state(ch)
        title = NT('biz_goal', '<b>–ö–∞–∫—É—é –≥–ª–∞–≤–Ω—É—é –∑–∞–¥–∞—á—É –¥–æ–ª–∂–µ–Ω —Ä–µ—à–∏—Ç—å —Å–∞–π—Ç?</b>')
        _send(
            f"{render_for_step(ch, 'biz_goal')}{framed(title)}",
            kb_with_bottom(
                rows=[
                    [types.InlineKeyboardButton("–ò–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ —Ç–æ–≤–∞—Ä–∞—Ö, —É—Å–ª—É–≥–∞—Ö", callback_data="goal_info2")],
                    [types.InlineKeyboardButton("–ò–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", callback_data="goal_info")],
                    [types.InlineKeyboardButton("–ü–æ–≤—ã—à–∞—Ç—å —É–∑–Ω–∞–≤–∞–µ–º–æ—Å—Ç—å –±—Ä–µ–Ω–¥–∞", callback_data="goal_brand")],
                    [types.InlineKeyboardButton("–ü—Ä–æ–¥–∞–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –∏–ª–∏ —É—Å–ª—É–≥–∏", callback_data="goal_sell")],
                    [types.InlineKeyboardButton("–°–æ–±–∏—Ä–∞—Ç—å –∑–∞—è–≤–∫–∏", callback_data="goal_leads")],
                ],
                back=True,
                other_cd="goal_custom"
            )
        )
        return

    if step_key == 'audience':
        bot.set_state(ch, St.audience, ch)
        title = NT('audience', '<b>–ö—Ç–æ –í–∞—à–∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã?</b>')
        _send(
            f"{render_for_step(ch, 'audience')}{framed_bottom(title)}\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–ª, –≤–æ–∑—Ä–∞—Å—Ç, —Ä–æ–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã.\n\n"
            "<i>–ù–∞–ø—Ä–∏–º–µ—Ä: ¬´–∂–µ–Ω—â–∏–Ω—ã; 25‚Äì40 –ª–µ—Ç; –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ—Å—è –º–æ–¥–æ–π¬ª.</i>\n",
            kb(add_back=True)
        )
        return

    if step_key == 'user_action':
        clear_state(ch)
        title = NT('user_action', '<b>–ö–∞–∫–æ–µ —Ü–µ–ª–µ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–æ–ª–∂–µ–Ω —Å–æ–≤–µ—Ä—à–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —Å–∞–π—Ç–µ?</b>')
        _send(
            f"{render_for_step(ch, 'user_action')}{framed(title)}",
            kb_with_bottom(
                rows=[
                    [types.InlineKeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="act_lead")],
                    [types.InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", callback_data="act_sub")],
                    [types.InlineKeyboardButton("–ü–æ–∑–≤–æ–Ω–∏—Ç—å", callback_data="act_call")],
                    [types.InlineKeyboardButton("–ö—É–ø–∏—Ç—å", callback_data="act_buy")],
                ],
                back=True,
                other_cd="act_custom"
            )
        )
        return

    if step_key == 'solution':
        clear_state(ch)
        info = (
            "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            "<b>–û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥:</b>\n\n"
            "‚Ä¢ <b>–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥</b> ‚Äî SEO –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞.\n"
            "‚Ä¢ <b>–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Å–∞–π—Ç</b> ‚Äî —Ä–∞–∑–¥–µ–ª—ã –æ –∫–æ–º–ø–∞–Ω–∏–∏, —É—Å–ª—É–≥–∞—Ö, –∫–µ–π—Å–∞—Ö.\n"
            "‚Ä¢ <b>–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω</b> ‚Äî –∫–∞—Ç–∞–ª–æ–≥, –∫–æ—Ä–∑–∏–Ω–∞, –æ–ø–ª–∞—Ç–∞ –∏ –¥–æ—Å—Ç–∞–≤–∫–∞.\n"
            "‚Ä¢ <b>–õ–µ–Ω–¥–∏–Ω–≥</b> ‚Äî –æ–¥–Ω–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π —Å–∞–π—Ç –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –ø—Ä–æ–¥–∞–∂ –∏ –∑–∞—è–≤–æ–∫.\n"
            "‚Ä¢ <b>–ß–∞—Ç-–±–æ—Ç</b> ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤/–∑–∞—è–≤–æ–∫."
        )
        title = NT('solution', '<b>–ö–∞–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ –≤–∞–º –Ω—É–∂–Ω–æ?</b>')
        text = f"{render_for_step(ch, 'solution')}{framed(title)}\n{info}"
        _send(
            text,
            kb(
                [types.InlineKeyboardButton("–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ (SEO/–∫–æ–Ω—Ç–µ–∫—Å—Ç)", callback_data="sol_mkt")],
                [types.InlineKeyboardButton("–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Å–∞–π—Ç", callback_data="sol_corp")],
                [types.InlineKeyboardButton("–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω", callback_data="sol_shop")],
                [types.InlineKeyboardButton("–õ–µ–Ω–¥–∏–Ω–≥", callback_data="sol_land")],
                [types.InlineKeyboardButton("–ß–∞—Ç-–±–æ—Ç", callback_data="sol_bot")],
                add_back=True
            )
        )
        return

    # ===== –í–ï–¢–ö–ò/–û–ë–©–ò–ï =====
    if step_key == 'A1_blocks':
        clear_state(ch)
        sol = USER[ch]["solution"]
        opts = A1_LANDING if sol == "–õ–µ–Ω–¥–∏–Ω–≥" else A1_CORP
        t_html = NT('A1_blocks', '<b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ –±–ª–æ–∫–∏/—Ä–∞–∑–¥–µ–ª—ã:</b>')
        text, markup = multiselect_screen(
            ch, 'A1_blocks', t_html,
            opts, single=False, add_other_text="üìù –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", add_preset=True
        )
        _send(text, markup); return

    if step_key == 'A2_functions':
        clear_state(ch)
        t_html = NT('A2_functions', '<b>–ü–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ª–∏ –í—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω–∞ —Å–∞–π—Ç–µ?</b>')
        text, markup = multiselect_screen(
            ch, 'A2_functions', t_html,
            A2_FUNCTIONS, single=False, add_other_text="üìù –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç"
        )
        _send(text, markup); return

    if step_key == 'B1_sections':
        clear_state(ch)
        t_html = NT('B1_sections', '<b>–†–∞–∑–¥–µ–ª—ã –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞:</b>')
        text, markup = multiselect_screen(
            ch, 'B1_sections', t_html,
            B1_SECTIONS, single=False, add_other_text="üìù –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", add_preset=True
        )
        _send(text, markup); return

    if step_key == 'B2_assort':
        clear_state(ch)
        t_html = NT('B2_assort', '<b>–°–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ?</b>')
        text, markup = multiselect_screen(
            ch, 'B2_assort', t_html,
            B2_ASSORT, single=True
        )
        _send(text, markup); return

    if step_key == 'B3_functions':
        clear_state(ch)
        t_html = NT('B3_functions', '<b>–ö–∞–∫–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω—É–∂–µ–Ω –≤ –º–∞–≥–∞–∑–∏–Ω–µ, –∫—Ä–æ–º–µ –∫–æ—Ä–∑–∏–Ω—ã?</b>')
        text, markup = multiselect_screen(
            ch, 'B3_functions', t_html,
            B3_FUNCTIONS, single=False
        )
        _send(text, markup); return

    if step_key == 'C1_tasks':
        clear_state(ch)
        t_html = NT('C1_tasks', '<b>–ì–¥–µ —á–∞—Ç-–±–æ—Ç –ø—Ä–∏–Ω–µ—Å—ë—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø–æ–ª—å–∑—É?</b>')
        text, markup = multiselect_screen(
            ch, 'C1_tasks', t_html,
            C1_TASKS, single=False, add_other_text="üìù –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", add_preset=True
        )
        _send(text, markup); return

    if step_key == 'C2_platforms':
        clear_state(ch)
        t_html = NT('C2_platforms', '<b>–í –∫–∞–∫–∏—Ö –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞—Ö/–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å —á–∞—Ç-–±–æ—Ç?</b>')
        text, markup = multiselect_screen(
            ch, 'C2_platforms', t_html,
            C2_PLATFORMS, single=False, add_other_text="üìù –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç"
        )
        _send(text, markup); return

    if step_key == 'C3_integrations':
        clear_state(ch)
        t_html = NT('C3_integrations', '<b>–ù—É–∂–Ω—ã –ª–∏ –í–∞–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏?</b>')
        text, markup = multiselect_screen(
            ch, 'C3_integrations', t_html,
            C3_INTEGR, single=False
        )
        _send(text, markup); return

    if step_key == 'D1_goals':
        clear_state(ch)
        t_html = NT('D1_goals', '<b>–ö–∞–∫—É—é –∑–∞–¥–∞—á—É —Ö–æ—Ç–∏—Ç–µ —Ä–µ—à–∏—Ç—å –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–º?</b>')
        text, markup = multiselect_screen(
            ch, 'D1_goals', t_html,
            D1_GOALS, single=False, add_other_text="üìù –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", add_preset=True
        )
        _send(text, markup); return

    if step_key == 'D2_channels':
        clear_state(ch)
        t_html = NT('D2_channels', '<b>–ö–∞–∫–∏–µ –∫–∞–Ω–∞–ª—ã –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?</b>')
        text, markup = multiselect_screen(
            ch, 'D2_channels', t_html,
            D2_CHANNELS, single=False
        )
        _send(text, markup); return

    if step_key == 'D4_budget':
        clear_state(ch)
        t_html = NT('D4_budget', '<b>–ö–∞–∫–æ–π –ø—Ä–∏–º–µ—Ä–Ω—ã–π –±—é–¥–∂–µ—Ç –Ω–∞ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –µ–∂–µ–º–µ—Å—è—á–Ω–æ?</b>')
        text, markup = multiselect_screen(
            ch, 'D4_budget', t_html,
            D4_BUDGET, single=True
        )
        _send(text, markup); return

    if step_key == 'design':
        clear_state(ch)
        t_html = NT('design', '<b>–ö–∞–∫–æ–π –¥–∏–∑–∞–π–Ω –í—ã —Ö–æ—Ç–∏—Ç–µ?</b>')
        text, markup = multiselect_screen(ch, 'design', t_html, DESIGN, single=True)
        _send(text, markup); return

    if step_key == 'content':
        clear_state(ch)
        t_html = NT('content', '<b>–ö—Ç–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –º–∞—Ç–µ—Ä–∏–∞–ª—ã?</b>')
        text, markup = multiselect_screen(ch, 'content', t_html, CONTENT, single=True)
        _send(text, markup); return

    if step_key == 'timeline':
        clear_state(ch)
        sol = USER[ch]["solution"]
        if sol in ("–õ–µ–Ω–¥–∏–Ω–≥", "–ß–∞—Ç-–±–æ—Ç", "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ (SEO/–∫–æ–Ω—Ç–µ–∫—Å—Ç)"):
            opts = [("1-2w", "1‚Äì2 –Ω–µ–¥–µ–ª–∏"), ("2-4w", "2‚Äì4 –Ω–µ–¥–µ–ª–∏")]
        elif sol == "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Å–∞–π—Ç":
            opts = [("2-4w", "2‚Äì4 –Ω–µ–¥–µ–ª–∏"), ("1-2m", "1‚Äì2 –º–µ—Å—è—Ü–∞")]
        elif sol == "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω":
            opts = [("1-2m", "1‚Äì2 –º–µ—Å—è—Ü–∞"), ("2-4m", "2‚Äì4 –º–µ—Å—è—Ü–∞")]
        else:
            opts = []
        t_html = NT('timeline', '<b>–ö–∞–∫ –±—ã—Å—Ç—Ä–æ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞–±–æ—Ç—É?</b>')
        text, markup = multiselect_screen(ch, 'timeline', t_html, opts, single=True)
        _send(text, markup); return

    if step_key == 'contacts':
        clear_state(ch)
        bot.set_state(ch, St.contacts, ch)
        frame = "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
        head = NT('contacts', '<b>–ë–ª–∞–≥–æ–¥–∞—Ä—é –í–∞—Å –∑–∞ –æ—Ç–≤–µ—Ç—ã. –û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>')
        body_html = (
            f"{frame}\n{head}\n{frame}\n"
            "‚Ä¢ üìß –ü–æ—á—Ç–∞\n"
            "‚Ä¢ üì± –¢–µ–ª–µ—Ñ–æ–Ω\n"
            "‚Ä¢ üí¨ @username\n\n"
            "<i>–ú–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –ª—é–±—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–º.</i>"
        )
        _send(
            f"{render_for_step(ch, 'contacts')}{body_html}",
            kb([types.InlineKeyboardButton("üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", callback_data="share_contact")],
               add_back=True, add_home=True)
        )
        return

    if step_key == 'confirm':
        d = USER[ch]["data"]
        tl_code = (d.get("timeline") or {}).get("items", [None])
        if isinstance(tl_code, list): tl_code = tl_code[0]
        tl_label = LABELS["timeline"].get(tl_code, "‚Äî")
        design_text = ", ".join(humanize_list("design", (d.get("design") or {}).get("items", []))) or "‚Äî"
        content_text = ", ".join(humanize_list("content", (d.get("content") or {}).get("items", []))) or "‚Äî"
        budget_text = LABELS["D4_budget"].get((d.get("D4_budget") or {}).get("items", [None])[0], "‚Äî")

        name = d.get("name", "‚Äî")
        s = [
            f"<b>–ò–º—è:</b> {name}",
            f"<b>–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:</b> {d.get('org_name', '‚Äî')}",
            f"<b>–ï—Å—Ç—å —Å–∞–π—Ç:</b> {d.get('has_site', '‚Äî')}",
        ]
        if d.get("has_site_comment"):
            s.append(f"<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Å–∞–π—Ç—É:</b> {d.get('has_site_comment')}")
        s += [
            f"<b>–ü—Ä–æ–¥—É–∫—Ç/—É—Å–ª—É–≥–∞:</b> {d.get('product', '‚Äî')}",
            f"<b>–ë–∏–∑–Ω–µ—Å-–∑–∞–¥–∞—á–∞:</b> {d.get('biz_goal', '‚Äî')}",
            f"<b>–¶–ê:</b> {d.get('audience', '‚Äî')}",
            f"<b>–¶–µ–ª–µ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b> {d.get('user_action', '‚Äî')}",
            f"<b>–¢–∏–ø —Ä–µ—à–µ–Ω–∏—è:</b> {USER[ch].get('solution','‚Äî')}",
            f"<b>–î–∏–∑–∞–π–Ω:</b> {design_text}",
            f"<b>–ö–æ–Ω—Ç–µ–Ω—Ç:</b> {content_text}",
            f"<b>–ë—é–¥–∂–µ—Ç:</b> {budget_text}",
            f"<b>–°—Ä–æ–∫–∏:</b> {tl_label}",
            f"<b>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</b> {d.get('contacts', '‚Äî')}",
        ]
        title = NT('confirm', '<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:</b>')
        _send(
            f"{render_for_step(ch, 'confirm')}{framed(title)}\n" + "\n".join(s),
            kb([types.InlineKeyboardButton(f"{EMOJI['confirm']} –°–∫–∞—á–∞—Ç—å –ö–ü (PDF)", callback_data="go_pdf")],
               add_home=True)
        )
        return

# =========================
# –•–≠–õ–ü–ï–† –î–õ–Ø –í–´–í–û–î–ê
# =========================
def pretty_items(entry):
    if not entry:
        return "‚Äî"
    if isinstance(entry, dict) and "items" in entry:
        items = entry["items"]
        text = ", ".join(items)
        return text + (f"; –î—Ä—É–≥–æ–µ: {entry.get('other')}" if entry.get("other") else "")
    return str(entry)


# =========================
# PDF
# =========================
KP_TEMPLATE = r"""
<!DOCTYPE html>
<html lang="ru">
<head>
<meta charset="UTF-8"><title>–ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ</title>
<style>
 body{font-family:Arial,sans-serif;margin:40px;line-height:1.6;color:#333}
 .header{text-align:center;margin-bottom:32px;border-bottom:2px solid #2c5aa0;padding-bottom:14px}
 .header h1{color:#2c5aa0;margin:0 0 8px}
 .muted{color:#6b7280}
 .section{margin-bottom:28px}
 .section-title{font-weight:bold;font-size:20px;margin:10px 0 12px;color:#2c5aa0;padding-bottom:6px;border-bottom:2px solid #2c5aa0}
 .kv{display:grid;grid-template-columns:220px 1fr;gap:8px 16px}
 .item{margin:6px 0}
 .subsection{margin:8px 0 10px}
 .subsection-title{font-weight:bold;color:#2c5aa0;margin-bottom:6px}
 table{width:100%;border-collapse:collapse;margin-top:10px}
 th,td{border:1px solid #e5e7eb;padding:10px;text-align:left}
 th{background:#2c5aa0;color:#fff}
 .total{font-size:20px;font-weight:bold;margin-top:12px;padding:12px;background:#f8f9fa;border-left:4px solid #2c5aa0}
 .contact-info{background:#e8f4ff;padding:16px;border-radius:8px}
</style>
</head>
<body>

<div class="header">
  <h1>–ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ</h1>
  <div class="muted"><b>–î–∞—Ç–∞:</b> {{ date }}</div>
</div>

{% if client.org_name or client.org_category %}
<div class="section">
  <div class="section-title">–ö–ª–∏–µ–Ω—Ç</div>
  <div class="kv">
    {% if client.org_name %}<div><b>–ö–æ–º–ø–∞–Ω–∏—è:</b></div><div>{{ client.org_name }}</div>{% endif %}
    {% if client.org_category %}<div><b>–°—Ç–∞—Ç—É—Å:</b></div><div>{{ client.org_category }}</div>{% endif %}
  </div>
</div>
{% endif %}

<div class="section">
  <div class="section-title">–û–±–∑–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞</div>
  <div class="kv">
    <div><b>–†–µ—à–µ–Ω–∏–µ:</b></div><div>{{ project.site_type }}</div>
    {% if project.goal %}<div><b>–¶–µ–ª—å:</b></div><div>{{ project.goal }}</div>{% endif %}
    {% if project.audience %}<div><b>–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è:</b></div><div>{{ project.audience }}</div>{% endif %}
  </div>
  {% if project.has_site %}<div class="item"><b>–ù–∞–ª–∏—á–∏–µ —Å–∞–π—Ç–∞:</b> {{ project.has_site }}</div>{% endif %}
  {% if project.has_site_comment %}<div class="item"><b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Å–∞–π—Ç—É:</b> {{ project.has_site_comment }}</div>{% endif %}
</div>

{% if selections_title and selections_text %}
<div class="section">
  <div class="section-title">{{ selections_title }}</div>
  {{ selections_text }}
</div>
{% endif %}

<div class="section">
  <div class="section-title">–ü–∞—Ä–∞–º–µ—Ç—Ä—ã</div>
  <div class="kv">
    {% if common.design %}<div><b>–î–∏–∑–∞–π–Ω:</b></div><div>{{ common.design }}</div>{% endif %}
    {% if common.content %}<div><b>–ö–æ–Ω—Ç–µ–Ω—Ç:</b></div><div>{{ common.content }}</div>{% endif %}
    {% if common.integr %}<div><b>–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:</b></div><div>{{ common.integr }}</div>{% endif %}
    {% if common.timeline %}<div><b>–°—Ä–æ–∫–∏:</b></div><div>{{ common.timeline }}</div>{% endif %}
    {% if budget %}<div><b>–ë—é–¥–∂–µ—Ç (–º–∞—Ä–∫–µ—Ç–∏–Ω–≥):</b></div><div>{{ budget }}</div>{% endif %}
  </div>
</div>

{% if options and options|length %}
<div class="section">
  <div class="section-title">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏</div>
  <table>
    <tr><th>–û–ø—Ü–∏—è</th><th>–°—Ç–æ–∏–º–æ—Å—Ç—å</th></tr>
    {% for o in options %}
      <tr>
        <td>{{ o.name }}</td>
        <td>{% if o.price == 'manager' %}<span style="color:#e74c3c;">–£—Ç–æ—á–Ω—è–µ—Ç—Å—è —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞</span>{% else %}{{ o.price }} ‚ÇΩ{% endif %}</td>
      </tr>
    {% endfor %}
  </table>
</div>
{% endif %}

<div class="section">
  <div class="section-title">–°—Ç–æ–∏–º–æ—Å—Ç—å</div>
  <div class="item"><b>–ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</b> {{ base_price }} ‚ÇΩ</div>
  <div class="total">–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {{ total_price }} ‚ÇΩ</div>
  {% if dev_time %}<div class="item"><b>–°—Ä–æ–∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:</b> {{ dev_time }}</div>{% endif %}
</div>

<div class="section contact-info">
  <div class="section-title">–ö–æ–Ω—Ç–∞–∫—Ç—ã</div>
  <div class="item"><b>–î–ª—è —Å–≤—è–∑–∏:</b> {{ client.contacts }}</div>
  <div class="item">–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤</div>
</div>

</body></html>
"""




# –ë–∞–∑–æ–≤—ã–µ —Ü–µ–Ω—ã –ø–æ —Ç–∏–ø—É —Ä–µ—à–µ–Ω–∏—è
BASE_PRICES = {
    "–õ–µ–Ω–¥–∏–Ω–≥": 180000,
    "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Å–∞–π—Ç": 150000,
    "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω": 240000,
    "–ß–∞—Ç-–±–æ—Ç": 120000,
    "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ (SEO/–∫–æ–Ω—Ç–µ–∫—Å—Ç)": 0,
}

# –ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞ –æ–ø—Ü–∏–π (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä—è—Ç—å ‚Äî —ç—Ç–æ –¥–∞—ë—Ç —Ç–∞–±–ª–∏—Ü—É –∫–∞–∫ –Ω–∞ —Å–∫—Ä–∏–Ω–µ)
OPTION_PRICES = {
    "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ (1 –º–µ—Å—è—Ü)": 5000,
    "SEO-–±–∞–∑–æ–≤–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è": 27000,
    "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —ç–∫–≤–∞–π—Ä–∏–Ω–≥–∞": 36000,
    "–°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∞–≤–∫–∏": 36000,
    "–°–∏—Å—Ç–µ–º–∞ –æ–Ω–ª–∞–π–Ω-–∑–∞–ø–∏—Å–∏": 27000,
    "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–æ—Ü—Å–µ—Ç—è–º–∏": 18000,
    "–ú—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω–æ—Å—Ç—å": 14400,
    "–§–∏—Ä–º–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å": "manager",
}

def _human(v):
    return pretty_items(v) if isinstance(v, (dict, list)) else (v or "‚Äî")

def _lines_from_dict(dct: dict|None) -> str:
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å–ª–æ–≤–∞—Ä—å –≤–∏–¥–∞ {'items':[...],'other':...} –≤ –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏."""
    if not dct or "items" not in dct: return ""
    parts = dct["items"][:]
    if dct.get("other"): parts.append(f"–î—Ä—É–≥–æ–µ: {dct['other']}")
    return "<br>‚Ä¢ " + "<br>‚Ä¢ ".join(parts) if parts else ""

def build_kp_context(ch: int):
    d = USER[ch]["data"]
    site_type = USER[ch].get("solution", "‚Äî")

    # --- 2.1 –ß–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–µ —Å–ø–∏—Å–∫–∏ –ø–æ –≤–µ—Ç–∫–µ ---
    parts = []
    # –ø–æ–¥–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –≥—Ä—É–ø–ø—ã –ø–æ–¥ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
    if site_type in ("–õ–µ–Ω–¥–∏–Ω–≥", "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Å–∞–π—Ç"):
        for key, title in [("A1_blocks","–ë–ª–æ–∫–∏/—Ä–∞–∑–¥–µ–ª—ã"), ("A2_functions","–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Å–∞–π—Ç–∞")]:
            if d.get(key):
                html_block = humanize_dict(key, d[key])
                if html_block:
                    parts.append(f"<div class='subsection'><div class='subsection-title'>{title}</div>{html_block}</div>")
        selections_title = "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Å–∞–π—Ç–∞"

    elif site_type == "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω":
        for key, title in [("B1_sections","–†–∞–∑–¥–µ–ª—ã –º–∞–≥–∞–∑–∏–Ω–∞"), ("B3_functions","–§—É–Ω–∫—Ü–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞")]:
            if d.get(key):
                html_block = humanize_dict(key, d[key])
                if html_block:
                    parts.append(f"<div class='subsection'><div class='subsection-title'>{title}</div>{html_block}</div>")
        selections_title = "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –º–∞–≥–∞–∑–∏–Ω–∞"

    elif site_type == "–ß–∞—Ç-–±–æ—Ç":
        for key, title in [("C1_tasks","–ó–∞–¥–∞—á–∏ —á–∞—Ç-–±–æ—Ç–∞"), ("C2_platforms","–ü–ª–∞—Ç—Ñ–æ—Ä–º—ã"), ("C3_integrations","–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞")]:
            if d.get(key):
                html_block = humanize_dict(key, d[key])
                if html_block:
                    parts.append(f"<div class='subsection'><div class='subsection-title'>{title}</div>{html_block}</div>")
        selections_title = "–ó–∞–¥–∞—á–∏ –∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã —á–∞—Ç-–±–æ—Ç–∞"

    else:  # –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ (SEO/–∫–æ–Ω—Ç–µ–∫—Å—Ç) ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ü–µ–ª–∏ –∏ –∫–∞–Ω–∞–ª—ã
        for key, title in [("D1_goals","–¶–µ–ª–∏ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞"), ("D2_channels","–ö–∞–Ω–∞–ª—ã –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è")]:
            if d.get(key):
                html_block = humanize_dict(key, d[key])
                if html_block:
                    parts.append(f"<div class='subsection'><div class='subsection-title'>{title}</div>{html_block}</div>")
        selections_title = "–¶–µ–ª–∏ –∏ –∫–∞–Ω–∞–ª—ã –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞"

    selections_text = "".join(parts)


    # —Å–æ–±–µ—Ä—ë–º ¬´—Å–∏–Ω–∏–µ¬ª –±–ª–æ–∫–∏
    selections_text_parts = []
    for key, title in [
        ("A1_blocks", "–ë–ª–æ–∫–∏/—Ä–∞–∑–¥–µ–ª—ã"),
        ("A2_functions", "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Å–∞–π—Ç–∞"),
        ("B1_sections", "–†–∞–∑–¥–µ–ª—ã –º–∞–≥–∞–∑–∏–Ω–∞"),
        ("B3_functions", "–§—É–Ω–∫—Ü–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞"),
        ("C1_tasks", "–ó–∞–¥–∞—á–∏ —á–∞—Ç-–±–æ—Ç–∞"),
        ("C2_platforms", "–ü–ª–∞—Ç—Ñ–æ—Ä–º—ã"),
        ("C3_integrations", "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞"),
    ]:
        if d.get(key):
            lines = humanize_dict(key, d[key])  # üëà –≤–º–µ—Å—Ç–æ _lines_from_dict
            if lines:
                selections_text_parts.append(
                    f"<div class='subsection'><div class='subsection-title'>{title}</div>{lines}</div>"
                )
    selections_text = "".join(selections_text_parts)

    # –±–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞
    base_price = BASE_PRICES.get(site_type, 0)

    # –æ–ø—Ü–∏–∏ (–ø—Ä–∏–º–µ—Ä: –¥–æ–±–∞–≤–∏–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–∏–ø–æ–≤—ã—Ö ‚Äî –º–æ–∂–Ω–æ –Ω–∞—Ä–∞—â–∏–≤–∞—Ç—å –º–∞–ø–ø–∏–Ω–≥ –∫–∞–∫ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è)
    options = []
    for name, price in OPTION_PRICES.items():
        # –ø–æ–∫–∞–∂–µ–º —Ç–µ, —á—Ç–æ –ª–æ–≥–∏—á–µ—Å–∫–∏ —Å–≤—è–∑–∞–Ω—ã —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ —à–∞–≥–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if name == "–°–∏—Å—Ç–µ–º–∞ –æ–Ω–ª–∞–π–Ω-–∑–∞–ø–∏—Å–∏" and 'A2_functions' in d and 'booking' in d['A2_functions'].get('items', []):
            options.append({"name": name, "price": price})
        elif name == "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–æ—Ü—Å–µ—Ç—è–º–∏" and (
            ('A2_functions' in d and 'social' in d['A2_functions'].get('items', [])) or
            ('C3_integrations' in d and 'mess' in d['C3_integrations'].get('items', []))
        ):
            options.append({"name": name, "price": price})
        elif name in ("SEO-–±–∞–∑–æ–≤–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è","–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ (1 –º–µ—Å—è—Ü)","–§–∏—Ä–º–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å","–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —ç–∫–≤–∞–π—Ä–∏–Ω–≥–∞","–°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∞–≤–∫–∏","–ú—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω–æ—Å—Ç—å"):
            # –ø–æ–∫–∞ –¥–æ–±–∞–≤–∏–º –∏—Ö –≤—Å–µ–≥–¥–∞ –∫–∞–∫ –ø—Ä–∏–º–µ—Ä (—á—Ç–æ–±—ã —Ç–∞–±–ª–∏—Ü–∞ –≤—ã–≥–ª—è–¥–µ–ª–∞ –∫–∞–∫ –Ω–∞ —ç—Ç–∞–ª–æ–Ω–Ω–æ–º —Å–∫—Ä–∏–Ω–µ)
            options.append({"name": name, "price": price})

    # —Å—É–º–º–∞ –ø–æ –æ–ø—Ü–∏—è–º (–∏—Å–∫–ª—é—á–∞—è ¬´manager¬ª)
    total_opts = sum(x["price"] for x in options if isinstance(x["price"], (int,float)))
    total_price = base_price + total_opts
    has_manager_options = any(x["price"] == "manager" for x in options)

    # —Å—Ä–æ–∫–∏: –∏–∑ –º—É–ª—å—Ç–∏–≤—ã–±–æ—Ä–∞ 'timeline' –ø—Ä–∏—Ö–æ–¥–∏—Ç –∫–æ–¥ ('1-2w'/'2-4w'/'1-2m'/'2-4m')
    tl_code = (d.get("timeline") or {}).get("items", [None])
    if isinstance(tl_code, list):  # single-select —Ö—Ä–∞–Ω–∏—Ç—Å—è –∫–∞–∫ —Å–ø–∏—Å–æ–∫ –∏–∑ –æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞
        tl_code = tl_code[0]

    timeline_map = {
        "1-2w": "1‚Äì2 –Ω–µ–¥–µ–ª–∏",
        "2-4w": "2‚Äì4 –Ω–µ–¥–µ–ª–∏",
        "1-2m": "1‚Äì2 –º–µ—Å—è—Ü–∞",
        "2-4m": "2‚Äì4 –º–µ—Å—è—Ü–∞",
    }
    tl_label = timeline_map.get(tl_code, "‚Äî")  # <-- —Ç–µ–ø–µ—Ä—å –≤—Å–µ–≥–¥–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞

    # —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è PDF
    dev_time = {
        "1‚Äì2 –Ω–µ–¥–µ–ª–∏": "14 –¥–Ω–µ–π",
        "2‚Äì4 –Ω–µ–¥–µ–ª–∏": "28 –¥–Ω–µ–π",
        "1‚Äì2 –º–µ—Å—è—Ü–∞": "1‚Äì2 –º–µ—Å—è—Ü–∞",
        "2‚Äì4 –º–µ—Å—è—Ü–∞": "2‚Äì4 –º–µ—Å—è—Ü–∞",
    }.get(tl_label, tl_label or "‚Äî")
    ctx = {
        "date": datetime.now().strftime("%d.%m.%Y"),
        "client": {
            "name": d.get("name", "‚Äî"),
            "org_name": d.get("org_name", "‚Äî"),
            "org_category": d.get("org_category", ""),
            "contacts": d.get("contacts", "‚Äî"),
        },
        "project": {
            "site_type": site_type,
            "goal": d.get("biz_goal", ""),
            "audience": d.get("audience", ""),
            "has_site": d.get("has_site", ""),
            "has_site_comment": d.get("has_site_comment", ""),
        },
        "common": {
            "design": pretty_human("design", d.get("design")),
            "content": pretty_human("content", d.get("content")),
            "integr": pretty_human("C3_integrations", d.get("C3_integrations")),
            "timeline": tl_label,
        },
        "budget": pretty_human("D4_budget", d.get("D4_budget")),   # –ø—É—Å—Ç–æ–µ –Ω–µ –ø–æ–∫–∞–∂–µ—Ç—Å—è –≤ —à–∞–±–ª–æ–Ω–µ
        "selections_title": selections_title if selections_text else "",
        "selections_text": selections_text,
        "options": options,
        "base_price": base_price,
        "total_price": total_price,
        "dev_time": dev_time or "",
        "has_manager_options": has_manager_options,
    }
    return ctx


def render_branch_for_pdf(d: dict, solution: str):
    out = {}
    if 'A1_blocks' in d: out["–ë–ª–æ–∫–∏/—Ä–∞–∑–¥–µ–ª—ã"] = pretty_items(d['A1_blocks'])
    if 'A2_functions' in d: out["–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª"] = pretty_items(d['A2_functions'])
    if 'B1_sections' in d: out["–†–∞–∑–¥–µ–ª—ã –º–∞–≥–∞–∑–∏–Ω–∞"] = pretty_items(d['B1_sections'])
    if 'B2_assort' in d: out["–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç"] = pretty_items(d['B2_assort'])
    if 'B3_functions' in d: out["–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –º–∞–≥–∞–∑–∏–Ω–∞"] = pretty_items(d['B3_functions'])
    if 'C1_tasks' in d: out["–ó–∞–¥–∞—á–∏ —á–∞—Ç-–±–æ—Ç–∞"] = pretty_items(d['C1_tasks'])
    if 'C2_platforms' in d: out["–ü–ª–∞—Ç—Ñ–æ—Ä–º—ã"] = pretty_items(d['C2_platforms'])
    if 'C3_integrations' in d: out["–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞"] = pretty_items(d['C3_integrations'])
    if 'D1_goals' in d: out["–¶–µ–ª–∏ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞"] = pretty_items(d['D1_goals'])
    if 'D2_channels' in d: out["–ö–∞–Ω–∞–ª—ã"] = pretty_items(d['D2_channels'])
    if 'D3_current' in d: out["–¢–µ–∫—É—â–∞—è —Å–∏—Ç—É–∞—Ü–∏—è"] = pretty_items(d['D3_current'])
    if 'D4_budget' in d: out["–ë—é–¥–∂–µ—Ç"] = pretty_items(d['D4_budget'])
    return out

def make_kp_html(ch: int) -> str:
    ctx = build_kp_context(ch)                           # —É–∂–µ –µ—Å—Ç—å –≤ –∫–æ–¥–µ
    html_text = Template(KP_TEMPLATE).render(**ctx)      # KP_TEMPLATE —É–∂–µ –µ—Å—Ç—å

    out_dir = os.path.join(os.getcwd(), "generated_kp")
    os.makedirs(out_dir, exist_ok=True)

    raw_contacts = USER[ch]["data"].get("contacts", "")  # –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
    phone = re.sub(r"\D", "", raw_contacts) or "unknown"

    stamp = datetime.now().strftime("%Y%m%d_%H%M%S")     # –¥–∞—Ç–∞+–≤—Ä–µ–º—è, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–∑–∞—Ç–∏—Ä–∞—Ç—å
    out_path = os.path.join(out_dir, f"KP_{phone}_{stamp}.html")

    with open(out_path, "w", encoding="utf-8") as f:
        f.write(html_text)
    return out_path

def make_pdf(ch: int) -> str:
    # —Ç–µ–ø–µ—Ä—å PDF –Ω–µ –≥–µ–Ω–µ—Ä–∏–º, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Ç—å –∫ HTML
    return make_kp_html(ch)

# =========================
# –ü–û–¢–û–ö/–í–ï–¢–ö–ò
# =========================
def apply_branch_flow(ch: int, solution_label: str):
    USER[ch]["solution"] = solution_label
    USER[ch]["multiselect_ctx"] = {}

    if solution_label in ("–õ–µ–Ω–¥–∏–Ω–≥", "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Å–∞–π—Ç"):
        b = 'A'
    elif solution_label == "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω":
        b = 'B'
    elif solution_label == "–ß–∞—Ç-–±–æ—Ç":
        b = 'C'
    else:
        b = 'D'
    USER[ch]["branch"] = b

    # –¥–æ–±–∏—Ä–∞–µ–º –≤–µ—Ç–∫—É –∫ –¢–ï–ö–£–©–ï–ú–£ –º–∞—Ä—à—Ä—É—Ç—É (–≤ –∫–æ—Ç–æ—Ä–æ–º ¬´has_site_comment¬ª —É–∂–µ
    # –µ—Å—Ç—å –∏–ª–∏ –µ–≥–æ –Ω–µ—Ç ‚Äì –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    flow = USER[ch]["flow"]
    if "solution" in flow:
        prefix = flow[:flow.index("solution") + 1]
    else:
        prefix = flow[:]
    USER[ch]["flow"] = prefix + BRANCH_FLOW[b] + COMMON_ORDER
    USER[ch]["idx"] = USER[ch]["flow"].index("solution")
# =========================
# CALLBACK-–∏
# =========================
@bot.callback_query_handler(func=lambda c: c.data == "share_contact")
def on_share_contact(c):
    ch = c.message.chat.id
    bot.answer_callback_query(c.id)

    share_kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    share_kb.add(types.KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä", request_contact=True))

    send_temp(
        ch,
        "üëá –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä¬ª –Ω–∏–∂–µ.\n"
        "–Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—é –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ Telegram-–Ω–∏–∫ –≤ –∫–æ–Ω—Ç–∞–∫—Ç—ã –ö–ü.",
        ttl=6,
        reply_markup=share_kb
    )

@bot.message_handler(content_types=['contact'], state=St.contacts)
def in_contact_obj(m):
    ch = m.chat.id
    parsed = parse_contacts("", tg_username=m.from_user.username,
                            phone_from_share=(m.contact.phone_number if m.contact else None))
    USER[ch]["data"]["contacts"] = format_contacts(parsed)
    safe_delete(ch, m.message_id)          # üóëÔ∏è —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ¬´–ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º¬ª
    send_temp(ch, "‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω!", ttl=3, reply_markup=types.ReplyKeyboardRemove())
    next_step(ch)
    send_step(ch, cur_step(ch), mid=get_last_mid(ch), edit=True)

@bot.callback_query_handler(func=lambda c: True)
def on_cb(c):
    ch, mid, data = c.message.chat.id, c.message.message_id, c.data

    # üëá –∑–∞—â–∏—Ç–∞: –µ—Å–ª–∏ —á–∞—Ç–∞ –µ—â—ë –Ω–µ—Ç –≤ –ø–∞–º—è—Ç–∏, —Å–æ–∑–¥–∞—ë–º
    if ch not in USER:
        init_user(ch)

    set_last_mid(ch, mid)

    if data == "ui_back":
        go_back(ch, mid)
        return
    try:
        bot.answer_callback_query(c.id)
    except Exception:
        pass
    log.info(
        f"cb:{data} idx={USER.get(ch, {}).get('idx')} step={USER.get(ch, {}).get('flow', [None])[USER.get(ch, {}).get('idx', 0)] if USER.get(ch) else '‚Äî'}")

    try:
        if data == "act_start":
            init_user(ch)
            send_step(ch, 'name', mid, edit=True)
            return
        if data == "act_about":
            about_text = (
                "‚ÑπÔ∏è <b>–û –±–æ—Ç–µ</b>\n\n"
                "1) –û—Ç–≤–µ—á–∞–µ—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã (‚âà3‚Äì5 –º–∏–Ω—É—Ç).\n"
                "2) –í—ã–±–∏—Ä–∞–µ—Ç–µ —Ä–µ—à–µ–Ω–∏–µ –∏ –Ω—É–∂–Ω—ã–µ –æ–ø—Ü–∏–∏.\n"
                "3) –ü–æ–ª—É—á–∞–µ—Ç–µ –≥–æ—Ç–æ–≤–æ–µ –ö–ü –≤ PDF.\n\n"
                "<b>–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å</b>\n"
                "–û—Ç–≤–µ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ö–ü –∏ —Å–≤—è–∑–∏ —Å –≤–∞–º–∏.\n\n"
                "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º¬ª –Ω–∏–∂–µ."
            )
            about_kb = types.InlineKeyboardMarkup()
            about_kb.add(types.InlineKeyboardButton("üìù –ù–∞—á–∞—Ç—å", callback_data="act_start"))
            about_kb.add(types.InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url="https://t.me/PlaBarov"))
            safe_edit_text(ch, mid, about_text, about_kb)
            return

        if data == "ui_home":
            safe_edit_text(ch, mid, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", main_menu_kb())
            return
        if data == "ui_back":
            go_back(ch, mid)
            return
        # –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if data.startswith("cat_"):
            USER[ch]["data"]["org_category"] = \
                {"cat_fl": "–§–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ", "cat_ip": "–ò–ü", "cat_ul": "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ", "cat_other": "–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç"}[
                    data]
            next_step(ch)
            send_step(ch, cur_step(ch), mid, edit=True)
            return

        # –µ—Å—Ç—å —Å–∞–π—Ç?
        if data in ("yn_yes", "yn_no") and cur_step(ch) == "has_site":
            USER[ch].setdefault("data", {})["has_site"] = "–î–∞" if data == "yn_yes" else "–ù–µ—Ç"

            if data == "yn_yes":
                # –∫–æ—Ä–æ—Ç–∫–∏–π –º–∞—Ä—à—Ä—É—Ç: –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ‚Üí –∫–æ–Ω—Ç–∞–∫—Ç—ã ‚Üí –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                USER[ch]["flow"] = ["name", "org_name", "has_site", "has_site_comment", "contacts", "confirm"]
                set_step(ch, "has_site_comment")
                bot.set_state(ch, St.has_site_comment, ch)
                prompt = framed(
                    numbered_title(ch, 'has_site_comment',
                                   "<b>–ß—Ç–æ –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è –≤ –≤–∞—à–µ–º —Å–∞–π—Ç–µ, –∏ —á—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å?</b>")
                    + "\n<i>–ù–∞–ø—Ä–∏–º–µ—Ä: ¬´–Ω—Ä–∞–≤–∏—Ç—Å—è –¥–∏–∑–∞–π–Ω, –Ω–æ –Ω–µ—Ç –∫–æ—Ä–∑–∏–Ω—ã¬ª.</i>"
                )
                safe_edit_text(
                    ch, mid,
                    f"{render_for_step(ch, 'has_site_comment')}{prompt}",
                    kb([types.InlineKeyboardButton(f"{EMOJI['back']} –ù–∞–∑–∞–¥", callback_data='ui_back')])
                )
            else:
                # –ø–æ–ª–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç: –∑–∞–¥–∞—á–∞ ‚Üí –¥–µ–π—Å—Ç–≤–∏–µ ‚Üí –ø—Ä–æ–¥—É–∫—Ç ‚Üí —Ä–µ—à–µ–Ω–∏–µ ...
                USER[ch]["flow"] = ["name", "org_name", "has_site", "biz_goal", "user_action", "product", "solution"]
                set_step(ch, "biz_goal")
                send_step(ch, "biz_goal", mid, edit=True)
            return

        # goal buttons
        if data.startswith("goal_"):
            mm = {"goal_sell": "–ü—Ä–æ–¥–∞–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –∏–ª–∏ —É—Å–ª—É–≥–∏", "goal_leads": "–°–æ–±–∏—Ä–∞—Ç—å –∑–∞—è–≤–∫–∏",
                  "goal_info2": "–ò–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ —Ç–æ–≤–∞—Ä–∞—Ö –∏–ª–∏ —É—Å–ª—É–≥–∞—Ö",
                  "goal_info": "–ò–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
                  "goal_brand": "–ü–æ–≤—ã—à–∞—Ç—å —É–∑–Ω–∞–≤–∞–µ–º–æ—Å—Ç—å –±—Ä–µ–Ω–¥–∞"}
            if data == "goal_custom":
                bot.set_state(ch, St.biz_goal, ch)  # <-- state —Ç–æ–ª—å–∫–æ –∑–¥–µ—Å—å
                safe_edit_text(
                    ch, mid,
                    f"{render_for_step(ch, 'biz_goal')}{framed(numbered_title(ch, 'biz_goal', '–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∫–ª—é—á–µ–≤—É—é –∑–∞–¥–∞—á—É —Ç–µ–∫—Å—Ç–æ–º:'))}",
                    kb(add_back=True, add_home=True)
                )
            else:
                USER[ch]["data"]["biz_goal"] = mm[data]
                next_step(ch)
                send_step(ch, cur_step(ch), mid, edit=True)
            return

        # user action buttons
        if data.startswith("act_"):
            mm = {"act_buy": "–ö—É–ø–∏—Ç—å", "act_call": "–ü–æ–∑–≤–æ–Ω–∏—Ç—å", "act_lead": "–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", "act_sub": "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"}
            if data == "act_custom":
                bot.set_state(ch, St.user_action, ch)
                safe_edit_text(
                    ch, mid,
                    f"{render_for_step(ch, 'user_action')}{framed(numbered_title(ch, 'user_action', '–£–∫–∞–∂–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ —Ç–µ–∫—Å—Ç–æ–º:'))}",
                    kb(add_back=True, add_home=True)
                )
            else:
                USER[ch]["data"]["user_action"] = mm[data]
                next_step(ch)
                send_step(ch, cur_step(ch), mid, edit=True)
            return

        # solution + info
        if data.startswith("sol_"):
            label = {"sol_land": "–õ–µ–Ω–¥–∏–Ω–≥", "sol_shop": "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω", "sol_corp": "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Å–∞–π—Ç",
                     "sol_bot": "–ß–∞—Ç-–±–æ—Ç", "sol_mkt": "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ (SEO/–∫–æ–Ω—Ç–µ–∫—Å—Ç)"}[data]
            apply_branch_flow(ch, label)
            next_step(ch)  # –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –ø–µ—Ä–≤—ã–π —à–∞–≥ –≤–µ—Ç–∫–∏
            send_step(ch, cur_step(ch), mid, edit=True)
            return

        # ==== –º—É–ª—å—Ç–∏–≤—ã–±–æ—Ä ====
        if data.startswith("opt::"):
            _, step, key = data.split("::", 2)
            toggle_select(ch, key)
            send_step(ch, step, mid, edit=True)
            return

        if data.startswith("done::"):
            _, step = data.split("::", 1)
            save_multiselect(ch)
            next_step(ch)
            send_step(ch, cur_step(ch), mid, edit=True)
            return

        if data.startswith("other::"):
            _, step = data.split("::", 1)
            multiselect_state(ch)["step"] = step
            bot.set_state(ch, St.other_input, ch)
            safe_edit_text(
                ch, mid,
                f"{render_for_step(ch, step)}{framed(numbered_title(ch, step, '–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–∞—Ä–∏–∞–Ω—Ç —Ç–µ–∫—Å—Ç–æ–º:'))}",
                kb(add_back=True, add_home=True)
            )
            return

        if data.startswith("preset::"):
            _, step = data.split("::", 1)
            # –ø—Ä–µ—Å–µ—Ç—ã
            if step == "A1_blocks":
                sol = USER[ch]["solution"]
                preset = [k for k, _ in (A1_LANDING if sol == "–õ–µ–Ω–¥–∏–Ω–≥" else A1_CORP)][:4]
            elif step == "B1_sections":
                preset = ["home", "catalog", "pdp", "cart", "contacts"]
            elif step == "C1_tasks":
                preset = ["faq", "consult", "booking"]
            elif step == "D1_goals":
                preset = ["leads", "seo"]
            else:
                preset = []
            start_multiselect(ch, step, single=False, seed=preset)
            send_step(ch, step, mid, edit=True)
            return

        # —Å–º–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if data.startswith("page::"):
            _, step, page_s = data.split("::", 2)
            st = multiselect_state(ch)
            st["step"] = step
            st["page"] = max(0, int(page_s))
            send_step(ch, step, mid, edit=True)
            return

        # pdf
        if data in ("go_pdf", "go_kp"):
            try:
                path = make_kp_html(ch)  # –∏–ª–∏ make_pdf(ch) ‚Äî –±–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã, –æ–±–∞ –¥–∞–¥—É—Ç HTML
                with open(path, "rb") as f:
                    bot.send_document(
                        ch, f,
                        visible_file_name=os.path.basename(path),
                        caption="–ì–æ—Ç–æ–≤–æ ‚úÖ (HTML)"
                    )
            except Exception as e:
                log.error(f"make_kp_html failed: {e}")
                bot.send_message(ch, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª. –°–æ–æ–±—â–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
            return

    except Exception:
        log.exception("callback error")


# =========================
# –¢–ï–ö–°–¢–û–í–´–ï –í–í–û–î–´
# =========================
CONTACT_EMAIL_RE = re.compile(r"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}")
CONTACT_TG_RE    = re.compile(r"@[A-Za-z0-9_]{5,32}")
CONTACT_PHONE_RE = re.compile(r"\+?\d[\d\s\-()]{6,}\d")

def _normalize_phone(s: str) -> str | None:
    if not s: return None
    digits = re.sub(r"\D", "", s)
    if not digits: return None
    # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –†–§-—Ñ–æ—Ä–º–∞—Ç —Ç–∏–ø–∞ 8XXXXXXXXXX ‚Üí +7XXXXXXXXXX
    if len(digits) == 11 and digits.startswith("8"):
        digits = "7" + digits[1:]
    return ("+" + digits) if not digits.startswith("+") else digits

def parse_contacts(text: str | None, tg_username: str | None = None, phone_from_share: str | None = None) -> dict:
    """–î–æ—Å—Ç–∞—ë–º email/telegram/phone –∏–∑ —Ç–µ–∫—Å—Ç–∞ + –∏–∑ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø–æ–ª–µ–π"""
    res = {}
    t = text or ""

    m = CONTACT_EMAIL_RE.search(t)
    if m: res["email"] = m.group(0)

    m = CONTACT_TG_RE.search(t)
    if m: res["telegram"] = m.group(0)

    m = CONTACT_PHONE_RE.search(t)
    if m:
        p = _normalize_phone(m.group(0))
        if p: res["phone"] = p

    # –∏–∑ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø–æ–ª–µ–π, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª ¬´–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º¬ª
    if phone_from_share and "phone" not in res:
        p = _normalize_phone(phone_from_share)
        if p: res["phone"] = p

    if tg_username and "telegram" not in res and tg_username:
        nick = tg_username if tg_username.startswith("@") else f"@{tg_username}"
        res["telegram"] = nick

    return res

def format_contacts(c: dict | None) -> str:
    if not c: return "‚Äî"
    parts = []
    if c.get("phone"):    parts.append(f"–¢–µ–ª–µ—Ñ–æ–Ω {c['phone']}")
    if c.get("email"):    parts.append(f"Email {c['email']}")
    if c.get("telegram"): parts.append(f"Telegram {c['telegram']}")
    return "; ".join(parts)

@bot.message_handler(commands=['start'])
def on_start(m):
    init_user(m.chat.id)
    # ‚ö†Ô∏è –ï—Å–ª–∏ —Ñ–æ—Ç–æ –ø–æ –ø—É—Ç–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –±–ª–æ–∫ –Ω–∏–∂–µ
    try:
        with open("C:/Users/Maksim/Documents/–ü–ª–∞—Ç–æ–Ω/chat bot/–±–æ—Ç –ö–ü/—Ñ–æ—Ç–æ.jpg", "rb") as photo:
            bot.send_photo(m.chat.id, photo)
    except Exception:
        pass

    m = bot.send_message(
        m.chat.id,
        "üëã <b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!  –ú–µ–Ω—è –∑–æ–≤—É—Ç –ï–≤–∞!</b>\n\n"
        "–Ø –ø–æ–º–æ–≥—É –í–∞–º —Å–æ–∑–¥–∞—Ç—å —Å–∞–π—Ç\n"
        "–∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ!\n\n"
        "–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.",
        reply_markup=main_menu_kb()
    )
    set_last_mid(m.chat.id, m.message_id)


from threading import Timer

@bot.message_handler(state=St.name)
@bot.message_handler(state=St.name)
def in_name(m):
    ch = m.chat.id
    name = (m.text or "").strip()
    USER[ch]["data"]["name"] = name
    safe_delete(ch, m.message_id)          # üóëÔ∏è —É–¥–∞–ª–∏—Ç—å –æ—Ç–≤–µ—Ç
    next_step(ch)

    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–µ–º –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –±–æ—Ç–∞
    safe_edit_text(ch, get_last_mid(ch), f"–†–∞–¥–∞ –Ω–∞—à–µ–º—É –∑–Ω–∞–∫–æ–º—Å—Ç–≤—É, <b>{h(name)}</b>!")

    from threading import Timer
    Timer(2, lambda: send_step(ch, cur_step(ch), mid=get_last_mid(ch), edit=True)).start()


@bot.message_handler(state=St.org_name)
def in_org_name(m):
    ch = m.chat.id
    t = (m.text or "").strip()
    safe_delete(ch, m.message_id)          # üóëÔ∏è
    if len(t) < 2:
        # –∫—Ä–∞—Ç–∫–æ–µ —Å–∏—Å—Ç–µ–º–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (–∏—Å—á–µ–∑–Ω–µ—Ç –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏)
        bot.send_message(ch, "‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏.")
        return
    USER[ch]["data"]["org_name"] = t
    next_step(ch)
    send_step(ch, cur_step(ch), mid=get_last_mid(ch), edit=True)


@bot.message_handler(state=St.has_site_comment)
def in_site_comment(m):
    ch = m.chat.id
    USER[ch]["data"]["has_site_comment"] = (m.text or "").strip()
    safe_delete(ch, m.message_id)

    # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º –ø–æ—Ç–æ–∫–µ –µ—Å—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    flow = get_flow(ch)
    extra = []
    if "contacts" not in flow:
        extra.append("contacts")
    if "confirm" not in flow:
        extra.append("confirm")
    if extra:
        USER[ch]["flow"] = flow + extra

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —à–∞–≥ 'contacts' –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –Ω–∞ –º–µ—Å—Ç–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
    USER[ch]["idx"] = USER[ch]["flow"].index("contacts")
    clear_state(ch)
    send_step(ch, "contacts", mid=get_last_mid(ch), edit=True)

@bot.message_handler(state=St.product)
def in_product(m):
    ch = m.chat.id
    USER[ch]["data"]["product"] = (m.text or "").strip()
    safe_delete(ch, m.message_id)          # üóëÔ∏è
    next_step(ch)
    send_step(ch, cur_step(ch), mid=get_last_mid(ch), edit=True)


@bot.message_handler(state=St.biz_goal)
def in_goal(m):
    ch = m.chat.id
    USER[ch]["data"]["biz_goal"] = (m.text or "").strip()
    safe_delete(ch, m.message_id)          # üóëÔ∏è
    next_step(ch)
    send_step(ch, cur_step(ch), mid=get_last_mid(ch), edit=True)


@bot.message_handler(state=St.audience)
def in_aud(m):
    ch = m.chat.id
    USER[ch]["data"]["audience"] = (m.text or "").strip()
    safe_delete(ch, m.message_id)          # üóëÔ∏è
    next_step(ch)
    send_step(ch, cur_step(ch), mid=get_last_mid(ch), edit=True)


@bot.message_handler(state=St.user_action)
def in_act(m):
    ch = m.chat.id
    USER[ch]["data"]["user_action"] = (m.text or "").strip()
    safe_delete(ch, m.message_id)          # üóëÔ∏è
    next_step(ch)
    send_step(ch, cur_step(ch), mid=get_last_mid(ch), edit=True)


@bot.message_handler(state=St.other_input)
def in_other(m):
    ch = m.chat.id
    set_other_value(ch, (m.text or "").strip())
    safe_delete(ch, m.message_id)          # üóëÔ∏è
    step = USER[ch]["multiselect_ctx"]["step"]
    send_step(ch, step, mid=get_last_mid(ch), edit=True)

@bot.message_handler(state=St.contacts)
def in_contacts(m):
    ch, txt = m.chat.id, (m.text or "").strip()
    parsed = parse_contacts(txt, m.from_user.username)
    safe_delete(ch, m.message_id)  # –Ω–µ –∫–æ–ø–∏–º —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    if not parsed:
        send_temp(ch, "‚ùå –í–≤–µ–¥–∏—Ç–µ email, —Ç–µ–ª–µ—Ñ–æ–Ω (—Ü–∏—Ñ—Ä–∞–º–∏) –∏–ª–∏ @username.", ttl=6)
        return

    USER[ch]["data"]["contacts"] = format_contacts(parsed)
    send_temp(ch, "‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω!", ttl=5)
    next_step(ch)
    send_step(ch, cur_step(ch), mid=USER[ch].get("last_mid"), edit=True)

@bot.message_handler(func=lambda m: True)
def fallback(m):
    ch = m.chat.id
    # —É–¥–∞–ª—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –Ω–µ –∫–æ–ø–∏–ª—Å—è ¬´—Ö–≤–æ—Å—Ç¬ª
    safe_delete(ch, m.message_id)
    if ch not in USER:
        on_start(m)
    # –∏–Ω–∞—á–µ ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º: –∞–∫—Ç–∏–≤–Ω—ã–π –≤–æ–ø—Ä–æ—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏

# =========================
# RUN
# =========================
if __name__ == "__main__":
    print("Bot is running‚Ä¶")
    bot.add_custom_filter(telebot.custom_filters.StateFilter(bot))
    bot.infinity_polling()
