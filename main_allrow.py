import os, re, logging
from datetime import datetime
from typing import List, Dict

import telebot
from telebot import types
from telebot.handler_backends import StatesGroup, State

from jinja2 import Template
import pdfkit

# =========================
# –õ–û–ì–ò
# =========================
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
log = logging.getLogger("kp-bot-branch")

# =========================
# –ù–ê–°–¢–†–û–ô–ö–ò
# =========================
TOKEN = os.getenv("TELEGRAM_TOKEN", '8068452070:AAFLDvT5HMKOQfhK5tcOD1zAJfmP84cmAvI')
if not TOKEN:
    log.warning("‚ö†Ô∏è TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω (export TELEGRAM_TOKEN=...)")

bot = telebot.TeleBot(TOKEN, parse_mode="HTML")
WKHTML = r"C:/Program Files/wkhtmltopdf/bin/wkhtmltopdf.exe" if os.name == "nt" else "/usr/bin/wkhtmltopdf"

THEME = {"brand": "#2c5aa0", "muted": "#6b7280", "accent": "#10b981"}
EMOJI = {"start": "üìù", "about": "‚ÑπÔ∏è", "back": "‚¨ÖÔ∏è", "home": "üè†", "ok": "‚úÖ", "no": "‚ùå", "edit": "‚úçÔ∏è", "confirm": "‚úîÔ∏è",
         "info": "üìã", "check": "‚òëÔ∏è", "empty": "‚¨ú"}

# –°–∫–æ–ª—å–∫–æ –æ–ø—Ü–∏–π –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –æ–¥–Ω–æ–π ¬´—Å—Ç—Ä–∞–Ω–∏—Ü–µ¬ª
PAGE_SIZE = 6

# =========================
# SAFE EDIT
# =========================
def safe_edit_text(chat_id: int, message_id: int, text: str, markup=None):
    try:
        bot.edit_message_text(text, chat_id, message_id, reply_markup=markup)
    except Exception as e:
        s = str(e).lower()
        if "message is not modified" in s:
            return
        if "message to edit not found" in s or "can't be edited" in s:
            bot.send_message(chat_id, text, reply_markup=markup)
            return
        raise


# =========================
# FSM (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –≤–≤–æ–¥–æ–≤)
# =========================
class St(StatesGroup):
    name = State()
    org_name = State()
    org_category = State()
    has_site = State()
    has_site_comment = State()
    product = State()
    biz_goal = State()
    audience = State()
    user_action = State()
    contacts = State()
    other_input = State()  # —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≤–≤–æ–¥ "–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç"


# =========================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–û–ï: –†–ê–ú–ö–ê –î–õ–Ø –í–û–ü–†–û–°–û–í
# =========================
def framed(text: str) -> str:
    frame = "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
    return f"{frame}\n{text}\n{frame}"


# =========================
# –ö–ù–û–ü–ö–ò
# =========================
def kb(*rows, add_back=False, add_home=False):
    m = types.InlineKeyboardMarkup()
    for row in rows:
        m.row(*row)
    # —É–ø—Ä–∞–≤–ª—è—é—â–∏–µ –∫–Ω–æ–ø–∫–∏ ‚Äî –≤—Å–µ–≥–¥–∞ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
    if add_back or add_home:
        btns = []
        if add_back:
            btns.append(types.InlineKeyboardButton(f"{EMOJI['back']} –ù–∞–∑–∞–¥", callback_data="ui_back"))
        if add_home:
            btns.append(types.InlineKeyboardButton(f"{EMOJI['home']} –í –º–µ–Ω—é", callback_data="ui_home"))
        m.row(*btns)
    return m

def main_menu_kb():
    return kb(
        [types.InlineKeyboardButton(f"{EMOJI['start']} –ù–∞—á–∞—Ç—å", callback_data="act_start")],
        [types.InlineKeyboardButton(f"{EMOJI['about']} –û –±–æ—Ç–µ", callback_data="act_about")]
    )


def yn_kb():
    # –î–∞ –∏ –ù–µ—Ç –≤ —Å—Ç–æ–ª–±–∏–∫
    return kb(
        [types.InlineKeyboardButton(f"{EMOJI['ok']} –î–∞", callback_data="yn_yes")],
        [types.InlineKeyboardButton(f"{EMOJI['no']} –ù–µ—Ç", callback_data="yn_no")],
        add_back=True, add_home=True
    )


# =========================
# –ü–†–û–ì–†–ï–°–°
# =========================
def render_progress(done: int, total: int) -> str:
    pct = int(done * 100 / max(1, total))
    filled = min(20, max(1, pct // 5))
    bar = "üü©" * filled + "‚¨õ" * (15 - filled)
    return f"<b>{bar} {pct}%</b>\n"


# =========================
# –î–ê–ù–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
# =========================
USER: Dict[int, dict] = {}  # chat_id -> dict

# –ë–∞–∑–æ–≤—ã–µ —à–∞–≥–∏ –¥–æ –≤—ã–±–æ—Ä–∞ –≤–µ—Ç–∫–∏
BASE_FLOW = ['name', 'org_name', 'org_category', 'has_site', 'product', 'biz_goal', 'audience', 'user_action',
             'solution']

# –í–µ—Ç–∫–∏
BRANCH_FLOW = {
    'A': ['A1_blocks', 'A2_functions'],  # Landing/Corp
    'B': ['B1_sections', 'B2_assort', 'B3_functions'],  # Shop
    'C': ['C1_tasks', 'C2_platforms', 'C3_integrations'],  # Bot
    'D': ['D1_goals', 'D2_channels', 'D3_current', 'D4_budget']  # Marketing
}
COMMON_FLOW = ['design', 'content', 'integrations_common', 'timeline', 'contacts', 'confirm']


def init_user(ch: int):
    USER[ch] = {
        "idx": 0,
        "flow": BASE_FLOW.copy(),
        "data": {},
        "branch": None,  # 'A'/'B'/'C'/'D'
        "solution": None,  # human label
        # –∫–æ–Ω—Ç–µ–∫—Å—Ç –º—É–ª—å—Ç–∏–≤—ã–±–æ—Ä–∞ ‚Äî –≤—Å–µ–≥–¥–∞ —Å–ª–æ–≤–∞—Ä—å
        "multiselect_ctx": {}
    }


def get_flow(ch: int) -> List[str]:
    return USER[ch]['flow']


def cur_step(ch: int) -> str:
    return get_flow(ch)[USER[ch]['idx']]


def set_step(ch: int, key: str):
    USER[ch]['idx'] = get_flow(ch).index(key)


def next_step(ch: int):
    USER[ch]['idx'] = min(USER[ch]['idx'] + 1, len(get_flow(ch)) - 1)


def total_steps(ch: int) -> int:
    return len(get_flow(ch))


# =========================
# –û–ü–¶–ò–ò –ü–û –¢–ó
# =========================
# A1: –ª–µ–Ω–¥–∏–Ω–≥/–∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π
A1_LANDING = [
    ("hero", "–ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω (–∑–∞–≥–æ–ª–æ–≤–æ–∫, –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é)"),
    ("about", "–û –Ω–∞—Å / –û –∫–æ–º–ø–∞–Ω–∏–∏"),
    ("products", "–£—Å–ª—É–≥–∏ –∏–ª–∏ –ø—Ä–æ–¥—É–∫—Ç—ã"),
    ("benefits", "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ / –ü–æ—á–µ–º—É –º—ã"),
    ("gallery", "–ì–∞–ª–µ—Ä–µ—è / –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ"),
    ("reviews", "–û—Ç–∑—ã–≤—ã –∫–ª–∏–µ–Ω—Ç–æ–≤"),
    ("contact", "–§–æ—Ä–º–∞ —Å–≤—è–∑–∏ / –ö–æ–Ω—Ç–∞–∫—Ç—ã"),
]
A1_CORP = [
    ("home", "–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"),
    ("about", "–û –∫–æ–º–ø–∞–Ω–∏–∏"),
    ("services", "–£—Å–ª—É–≥–∏ (–∏–ª–∏ –∫–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥)"),
    ("cases", "–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ / –ö–µ–π—Å—ã"),
    ("blog", "–ë–ª–æ–≥ / –ù–æ–≤–æ—Å—Ç–∏"),
    ("contacts", "–ö–æ–Ω—Ç–∞–∫—Ç—ã"),
    ("team", "–ö–æ–º–∞–Ω–¥–∞"),
    ("prices", "–¶–µ–Ω—ã / –ü—Ä–∞–π—Å-–ª–∏—Å—Ç"),
    ("faq", "FAQ (–≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã)"),
]
A2_FUNCTIONS = [
    ("form", "–§–æ—Ä–º–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"),
    ("booking", "–û–Ω–ª–∞–π–Ω-–∑–∞–ø–∏—Å—å / –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"),
    ("chat", "–ß–∞—Ç —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"),
    ("social", "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–æ—Ü—Å–µ—Ç—è–º–∏"),
    ("lk", "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞"),
]

# B
B1_SECTIONS = [
    ("home", "–ì–ª–∞–≤–Ω–∞—è (–≤–∏—Ç—Ä–∏–Ω–∞ —Å –∞–∫—Ü–∏—è–º–∏, –Ω–æ–≤–∏–Ω–∫–∞–º–∏)"),
    ("catalog", "–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤"),
    ("pdp", "–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç–æ–≤–∞—Ä–∞ (–æ–ø–∏—Å–∞–Ω–∏–µ, —Ñ–æ—Ç–æ, —Ü–µ–Ω–∞)"),
    ("cart", "–ö–æ—Ä–∑–∏–Ω–∞"),
    ("lk", "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è"),
    ("about", "–û –∫–æ–º–ø–∞–Ω–∏–∏ / –û –Ω–∞—Å"),
    ("delivery", "–î–æ—Å—Ç–∞–≤–∫–∞ –∏ –æ–ø–ª–∞—Ç–∞"),
    ("contacts", "–ö–æ–Ω—Ç–∞–∫—Ç—ã"),
    ("reviews", "–û—Ç–∑—ã–≤—ã –æ —Ç–æ–≤–∞—Ä–∞—Ö –∏–ª–∏ –º–∞–≥–∞–∑–∏–Ω–µ"),
    ("blog", "–ë–ª–æ–≥ / –°—Ç–∞—Ç—å–∏"),
    ("faq", "FAQ (–≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã)"),
]
B2_ASSORT = [("s", "–î–æ 50 —Ç–æ–≤–∞—Ä–æ–≤"), ("m", "–û–∫–æ–ª–æ 100‚Äì200 —Ç–æ–≤–∞—Ä–æ–≤"), ("l", "–ë–æ–ª–µ–µ 200 —Ç–æ–≤–∞—Ä–æ–≤"),
             ("unknown", "–ü–æ–∫–∞ –Ω–µ –∑–Ω–∞—é")]
B3_FUNCTIONS = [
    ("filters", "–§–∏–ª—å—Ç—Ä—ã –∏ –ø–æ–∏—Å–∫ –ø–æ —Ç–æ–≤–∞—Ä–∞–º"),
    ("ratings", "–û—Ç–∑—ã–≤—ã –∏ —Ä–µ–π—Ç–∏–Ω–≥–∏"),
    ("compare", "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤"),
    ("fast", "–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –≤ 1 –∫–ª–∏–∫ (–æ–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç–∞)"),
    ("lk", "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è"),
]

# C
C1_TASKS = [
    ("consult", "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∏ –ø–æ–¥–±–æ—Ä —Ç–æ–≤–∞—Ä–∞/—É—Å–ª—É–≥–∏"),
    ("booking", "–ü—Ä–∏–µ–º –∑–∞–∫–∞–∑–æ–≤ –∏–ª–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–µ"),
    ("promo", "–ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∞–∫—Ü–∏–π –∏ —Å–±–æ—Ä –±–∞–∑—ã –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"),
    ("faq", "–û—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã (FAQ)"),
    ("status", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–∫–∞–∑–∞ –∏–ª–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏"),
    ("record", "–ó–∞–ø–∏—Å—å –Ω–∞ —É—Å–ª—É–≥—É –∏–ª–∏ –ø—Ä–∏–µ–º"),
]
C2_PLATFORMS = [("tg", "Telegram"), ("wa", "WhatsApp"), ("vb", "Viber"), ("vk", "–í–ö–æ–Ω—Ç–∞–∫—Ç–µ"),
                ("site", "–°–∞–π—Ç (–≤–∏–¥–∂–µ—Ç —á–∞—Ç-–±–æ—Ç–∞)")]
C3_INTEGR = [
    ("crm", "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CRM (–ë–∏—Ç—Ä–∏–∫—Å24, AmoCRM)"),
    ("pay", "–ü–ª–∞—Ç–µ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã"),
    ("delivery", "–°–ª—É–∂–±—ã –¥–æ—Å—Ç–∞–≤–∫–∏ / —Ç—Ä–µ–∫–∏–Ω–≥"),
    ("db", "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"),
]

# D
D1_GOALS = [
    ("leads", "–£–≤–µ–ª–∏—á–∏—Ç—å –ø–æ—Ç–æ–∫ –∑–∞—è–≤–æ–∫ –∏ –ø—Ä–æ–¥–∞–∂ (–ª–∏–¥—ã)"),
    ("brand", "–ü–æ–≤—ã—Å–∏—Ç—å —É–∑–Ω–∞–≤–∞–µ–º–æ—Å—Ç—å –±—Ä–µ–Ω–¥–∞"),
    ("seo", "–£–ª—É—á—à–∏—Ç—å –ø–æ–∑–∏—Ü–∏–∏ —Å–∞–π—Ç–∞ –≤ –ø–æ–∏—Å–∫–æ–≤–∏–∫–∞—Ö (SEO)"),
    ("ads", "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∏ –≤–µ—Å—Ç–∏ —Ä–µ–∫–ª–∞–º—É (–Ø–Ω–¥–µ–∫—Å/Google)"),
    ("social", "–†–∞–∑–≤–∏–≤–∞—Ç—å —Å–æ—Ü—Å–µ—Ç–∏ (Instagram, VK, Telegram)"),
    ("audit", "–ü–æ–Ω—è—Ç—å, —á—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ç–µ–∫—É—â–µ–º –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–∏ (–∞—É–¥–∏—Ç)"),
    ("strategy", "–†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π –ø–ª–∞–Ω (—Å—Ç—Ä–∞—Ç–µ–≥–∏—è)"),
]
D2_CHANNELS = [
    ("seo", "–ü–æ–∏—Å–∫–æ–≤–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è (SEO)"),
    ("ads", "–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞"),
    ("target", "–¢–∞—Ä–≥–µ—Ç –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö"),
    ("content", "–ö–æ–Ω—Ç–µ–Ω—Ç-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥ (–±–ª–æ–≥/—Å—Ç–∞—Ç—å–∏)"),
    ("email", "Email-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥ (—Ä–∞—Å—Å—ã–ª–∫–∏)"),
]
D3_CURRENT = [
    ("site_no_ads", "–ï—Å—Ç—å —Å–∞–π—Ç, –Ω–æ –Ω–µ—Ç —Ä–µ–∫–ª–∞–º—ã"),
    ("ads_no_result", "–ï—Å—Ç—å —Å–∞–π—Ç –∏ —Ä–µ–∫–ª–∞–º–∞, –Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ —É—Å—Ç—Ä–∞–∏–≤–∞—é—Ç"),
    ("no_site_social", "–ù–µ—Ç —Å–∞–π—Ç–∞, –Ω—É–∂–Ω–∞ —Ä–µ–∫–ª–∞–º–∞ –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö –∏–ª–∏ –ø–æ–∏—Å–∫–æ–≤–∏–∫–∞—Ö"),
    ("nothing", "–ù–∏—á–µ–≥–æ –Ω–µ—Ç, –Ω–∞—á–∏–Ω–∞–µ–º —Å –Ω—É–ª—è"),
]
D4_BUDGET = [("lt50", "–î–æ 50 000 ‚ÇΩ/–º–µ—Å"), ("50-100", "50 000‚Äì100 000 ‚ÇΩ/–º–µ—Å"), ("gt100", "–ë–æ–ª–µ–µ 100 000 ‚ÇΩ/–º–µ—Å"),
             ("advise", "–ü—Ä–µ–¥–ª–æ–∂–∏—Ç–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç")]

# –û–±—â–∏–µ
DESIGN = [("uniq", "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –¥–∏–∑–∞–π–Ω"), ("tpl", "–ì–æ—Ç–æ–≤—ã–π —à–∞–±–ª–æ–Ω"), ("advise", "–ü–æ—Å–æ–≤–µ—Ç—É–π—Ç–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç")]
CONTENT = [("client", "–Ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—é –≥–æ—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç"), ("help", "–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞"),
           ("mix", "–°–º–µ—à–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç")]
INTEGR_COMMON = [("crm", "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CRM"), ("ga", "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"), ("mess", "–ß–∞—Ç –∏–ª–∏ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä—ã"),
                 ("ml", "–ú–Ω–æ–≥–æ—è–∑—ã—á–Ω–æ—Å—Ç—å")]


# =========================
# –ú–£–õ–¨–¢–ò–í–´–ë–û–† —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
# =========================
def multiselect_state(ch: int):
    """–ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –≤–µ—Ä–Ω—É—Ç—å —Å–ª–æ–≤–∞—Ä—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –º—É–ª—å—Ç–∏–≤—ã–±–æ—Ä–∞."""
    ctx = USER[ch].get("multiselect_ctx")
    if not isinstance(ctx, dict):
        ctx = {"step": None, "selected": set(), "single": False, "preset": None, "page": 0}
        USER[ch]["multiselect_ctx"] = ctx
    ctx.setdefault("step", None)
    ctx.setdefault("selected", set())
    ctx.setdefault("single", False)
    ctx.setdefault("preset", None)
    ctx.setdefault("page", 0)
    return ctx


def start_multiselect(ch: int, step: str, single: bool = False, preset: List[str] = None, seed: List[str] = None):
    ctx = multiselect_state(ch)
    ctx["step"] = step
    ctx["single"] = single
    ctx["preset"] = preset or []
    ctx["selected"] = set(seed or [])
    ctx["page"] = 0  # –≤—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã


def ensure_multiselect(ch: int, step: str, single: bool = False):
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¢–û–õ–¨–ö–û –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ –≤ —à–∞–≥.
    –ï—Å–ª–∏ –≤—ã–±–æ—Ä —Ä–∞–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω ‚Äî –ø–æ–¥—Ö–≤–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ, –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞—è –≥–∞–ª–æ—á–∫–∏.
    """
    ctx = multiselect_state(ch)
    if ctx["step"] != step:
        prev_items = USER[ch]["data"].get(step, {}).get("items", [])
        start_multiselect(ch, step, single=single, seed=prev_items)
    else:
        ctx["single"] = single  # —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Ä–µ–∂–∏–º


def toggle_select(ch: int, key: str):
    ctx = multiselect_state(ch)
    if ctx["single"]:
        ctx["selected"] = set([key])
    else:
        if key in ctx["selected"]:
            ctx["selected"].remove(key)
        else:
            ctx["selected"].add(key)


def set_other_value(ch: int, text: str):
    d = USER[ch]["data"]
    step = multiselect_state(ch)["step"]
    d.setdefault(step, {"items": [], "other": None})
    d[step]["other"] = text


def save_multiselect(ch: int):
    ctx = multiselect_state(ch)
    d = USER[ch]["data"]
    d[ctx["step"]] = {"items": list(ctx["selected"]), "other": d.get(ctx["step"], {}).get("other")}
    return d[ctx["step"]]


def selected_marker(ch: int, key: str) -> str:
    return EMOJI['check'] if key in multiselect_state(ch)["selected"] else EMOJI['empty']


def build_paginated_rows(ch: int, step: str, options, page: int,
                         add_other_text: str = None, add_preset: bool = False):
    rows = []
    start = page * PAGE_SIZE
    end = min(len(options), start + PAGE_SIZE)

    # –û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø—Ü–∏–∏ ‚Äî –≤—Å–µ–≥–¥–∞ –≤ —Å—Ç–æ–ª–±–∏–∫
    for key, label in options[start:end]:
        btn = types.InlineKeyboardButton(
            f"{selected_marker(ch, key)} {label}",
            callback_data=f"opt::{step}::{key}"
        )
        rows.append([btn])

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    if page > 0:
        rows.append([types.InlineKeyboardButton("‚óÄÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã", callback_data=f"page::{step}::{page-1}")])
    if end < len(options):
        rows.append([types.InlineKeyboardButton("–ï—â–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã ‚ñ∂Ô∏è", callback_data=f"page::{step}::{page+1}")])

    # –ü—Ä–µ—Å–µ—Ç ‚Äî –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π
    if add_preset:
        rows.append([types.InlineKeyboardButton("–ü—Ä–µ–¥–ª–æ–∂–∏—Ç–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –Ω–∞–±–æ—Ä",
                                                callback_data=f"preset::{step}")])
    # ¬´–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç¬ª + ¬´–ì–æ—Ç–æ–≤–æ¬ª ‚Äî –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
    if add_other_text:
        other_btn = types.InlineKeyboardButton(add_other_text, callback_data=f"other::{step}")
        done_btn  = types.InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ", callback_data=f"done::{step}")
        rows.append([other_btn, done_btn])
    else:
        rows.append([types.InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ", callback_data=f"done::{step}")])

    return rows



def multiselect_screen(ch: int, step: str, title_html: str, options,
                       single: bool = False, add_other_text: str = None, add_preset: bool = False):
    ensure_multiselect(ch, step, single=single)
    page = multiselect_state(ch)["page"]
    rows = build_paginated_rows(ch, step, options, page,
                                add_other_text=add_other_text, add_preset=add_preset)

    # –ü–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ–º –Ω–∏–∂–Ω–∏–π —Ä—è–¥: ‚¨Ö –ù–∞–∑–∞–¥ | üìù –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç | ‚úÖ –ì–æ—Ç–æ–≤–æ
    back_btn = types.InlineKeyboardButton(f"{EMOJI['back']} –ù–∞–∑–∞–¥", callback_data="ui_back")
    if rows:
        last = rows[-1]
        has_other = any((getattr(btn, "callback_data", "") or "").startswith("other::") for btn in last)
        has_done  = any((getattr(btn, "callback_data", "") or "").startswith("done::")  for btn in last)
        if has_other or has_done:
            rows[-1] = [back_btn] + last
        else:
            rows.append([back_btn])
    else:
        rows = [[back_btn]]

    m = types.InlineKeyboardMarkup()
    for r in rows:
        m.row(*r)

    text = f"{framed(f'<b>{title_html}</b>')}"
    return text, m


# =========================
# –¢–ï–ö–°–¢ –ü–û–ú–û–©–ò/–û–ü–ò–°–ê–ù–ò–Ø
# =========================
SERVICES_INFO = (
    "<b>–û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥:</b>\n\n"
    "‚Ä¢ <b>–õ–µ–Ω–¥–∏–Ω–≥</b> ‚Äî –æ–¥–Ω–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π —Å–∞–π—Ç –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –ø—Ä–æ–¥–∞–∂ –∏ –∑–∞—è–≤–æ–∫.\n"
    "‚Ä¢ <b>–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω</b> ‚Äî –∫–∞—Ç–∞–ª–æ–≥, –∫–æ—Ä–∑–∏–Ω–∞, –æ–ø–ª–∞—Ç–∞ –∏ –¥–æ—Å—Ç–∞–≤–∫–∞.\n"
    "‚Ä¢ <b>–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Å–∞–π—Ç</b> ‚Äî —Ä–∞–∑–¥–µ–ª—ã –æ –∫–æ–º–ø–∞–Ω–∏–∏, —É—Å–ª—É–≥–∞—Ö, –∫–µ–π—Å–∞—Ö.\n"
    "‚Ä¢ <b>–ß–∞—Ç-–±–æ—Ç</b> ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤/–∑–∞—è–≤–æ–∫.\n"
    "‚Ä¢ <b>–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥</b> ‚Äî SEO –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è —Ä–µ–∫–µ–∫–ª–∞–º–∞."
)


# =========================
# –†–ï–ù–î–ï–† –®–ê–ì–û–í (—Å–æ —Å—Ç–∏–ª–µ–º ¬´–≤ —Ä–∞–º–∫–µ¬ª) ‚Äî –í–°–ï –ö–ù–û–ü–ö–ò –í –°–¢–û–õ–ë–ò–ö + –ü–ê–ì–ò–ù–ê–¶–ò–Ø
# =========================
def send_step(ch: int, step_key: str, mid: int = None, edit: bool = False):
    flow = get_flow(ch)
    idx = flow.index(step_key)
    done = idx + 1
    total = len(flow)

    def _send(text, markup=None):
        if edit and mid:
            try:
                safe_edit_text(ch, mid, text, markup)
            except Exception:
                bot.send_message(ch, text, reply_markup=markup)
        else:
            bot.send_message(ch, text, reply_markup=markup)

    # ===== –ë–ê–ó–û–í–´–ï =====
    if step_key == 'name':
        bot.set_state(ch, St.name, ch)
        _send(
            f"{render_progress(done, total)}{framed('<b>–ö–∞–∫ –í–∞—Å –∑–æ–≤—É—Ç?</b>')}\n",
            kb([types.InlineKeyboardButton(f"{EMOJI['home']} –í –º–µ–Ω—é", callback_data='ui_home')])
        )
        return

    if step_key == 'org_name':
        bot.set_state(ch, St.org_name, ch)
        nm = USER[ch]["data"].get("name", "")
        title = framed(
            f"–†–∞–¥–∞ –Ω–∞—à–µ–º—É –∑–Ω–∞–∫–æ–º—Å—Ç–≤—É, <b>{nm}</b>!\n\n"
            f"<b>–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤–∞—à–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è?</b>"
        )
        _send(
            f"{render_progress(done, total)}{title}",
            kb(add_back=True, add_home=True)
        )
        return

    if step_key == 'org_category':
        bot.set_state(ch, St.org_category, ch)
        _send(
            f"{render_progress(done, total)}{framed('<b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:</b>')}",
            kb(
                [types.InlineKeyboardButton("–§–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ", callback_data="cat_fl")],
                [types.InlineKeyboardButton("–Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ", callback_data="cat_ul")],
                [types.InlineKeyboardButton("–ò–ü", callback_data="cat_ip")],
                add_back=True, add_home=True
            )
        )
        return

    if step_key == 'has_site':
        bot.set_state(ch, St.has_site, ch)
        _send(f"{render_progress(done, total)}{framed('<b>–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Å–∞–π—Ç?</b>')}", yn_kb())
        return

    if step_key == 'product':
        bot.set_state(ch, St.product, ch)
        _send(
            f"{render_progress(done, total)}{framed('<b>–ö–∞–∫–æ–π –ø—Ä–æ–¥—É–∫—Ç –∏–ª–∏ —É—Å–ª—É–≥—É –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø—Ä–æ–¥–≤–∏–≥–∞—Ç—å?</b>')}",
            kb(add_back=True, add_home=True)
        )
        return

    if step_key == 'biz_goal':
        bot.set_state(ch, St.biz_goal, ch)
        _send(
            f"{render_progress(done, total)}{framed('<b>–ö–∞–∫—É—é –≥–ª–∞–≤–Ω—É—é –∑–∞–¥–∞—á—É –¥–æ–ª–∂–µ–Ω —Ä–µ—à–∏—Ç—å —Å–∞–π—Ç?</b>')}",
            kb(
                [types.InlineKeyboardButton("–ü—Ä–æ–¥–∞–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –∏–ª–∏ —É—Å–ª—É–≥–∏", callback_data="goal_sell")],
                [types.InlineKeyboardButton("–°–æ–±–∏—Ä–∞—Ç—å –∑–∞—è–≤–∫–∏", callback_data="goal_leads")],
                [types.InlineKeyboardButton("–ò–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, —Ç–æ–≤–∞—Ä–∞—Ö, —É—Å–ª—É–≥–∞—Ö",
                                            callback_data="goal_info")],
                [types.InlineKeyboardButton("–ü–æ–≤—ã—à–∞—Ç—å —É–∑–Ω–∞–≤–∞–µ–º–æ—Å—Ç—å –±—Ä–µ–Ω–¥–∞", callback_data="goal_brand")],
                [types.InlineKeyboardButton("üìù –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", callback_data="goal_custom")],
                add_back=True, add_home=True
            )
        )
        return

    if step_key == 'audience':
        bot.set_state(ch, St.audience, ch)
        _send(
            f"{render_progress(done, total)}{framed('<b>–ö—Ç–æ –í–∞—à–∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã?</b>')}\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–ª, –≤–æ–∑—Ä–∞—Å—Ç, —Ä–æ–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã.\n\n"
            "<i>–ù–∞–ø—Ä–∏–º–µ—Ä: ¬´–∂–µ–Ω—â–∏–Ω—ã; 25‚Äì40 –ª–µ—Ç; –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ—Å—è –º–æ–¥–æ–π¬ª.</i>\n",
            kb(add_back=True, add_home=True)
        )
        return

    if step_key == 'user_action':
        bot.set_state(ch, St.user_action, ch)
        _send(
            f"{render_progress(done, total)}"
            f"{framed('<b>–ö–∞–∫–æ–µ —Ü–µ–ª–µ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–æ–ª–∂–µ–Ω —Å–æ–≤–µ—Ä—à–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —Å–∞–π—Ç–µ?</b>')}",
            kb(
                [types.InlineKeyboardButton("–ö—É–ø–∏—Ç—å", callback_data="act_buy")],
                [types.InlineKeyboardButton("–ü–æ–∑–≤–æ–Ω–∏—Ç—å", callback_data="act_call")],
                [types.InlineKeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="act_lead")],
                [types.InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", callback_data="act_sub")],
                [types.InlineKeyboardButton("üìù –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", callback_data="act_custom")],
                add_back=True, add_home=True
            )
        )
        return

    if step_key == 'solution':
        _send(
            f"{render_progress(done, total)}{framed('<b>–ö–∞–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ –≤–∞–º –Ω—É–∂–Ω–æ?</b>')}",
            kb(
                [types.InlineKeyboardButton("–õ–µ–Ω–¥–∏–Ω–≥", callback_data="sol_land")],
                [types.InlineKeyboardButton("–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω", callback_data="sol_shop")],
                [types.InlineKeyboardButton("–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Å–∞–π—Ç", callback_data="sol_corp")],
                [types.InlineKeyboardButton("–ß–∞—Ç-–±–æ—Ç", callback_data="sol_bot")],
                [types.InlineKeyboardButton("–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ (SEO/–∫–æ–Ω—Ç–µ–∫—Å—Ç)", callback_data="sol_mkt")],
                [types.InlineKeyboardButton(f"{EMOJI['info']} –û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥", callback_data="sol_info")],
                add_back=True, add_home=True
            )
        )
        return

    # ===== –í–ï–¢–ö–ò/–û–ë–©–ò–ï ‚Äî —á–µ—Ä–µ–∑ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω =====
    if step_key == 'A1_blocks':
        sol = USER[ch]["solution"]
        opts = A1_LANDING if sol == "–õ–µ–Ω–¥–∏–Ω–≥" else A1_CORP
        text, markup = multiselect_screen(
            ch, 'A1_blocks', '–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ –±–ª–æ–∫–∏/—Ä–∞–∑–¥–µ–ª—ã (–º—É–ª—å—Ç–∏–≤—ã–±–æ—Ä):',
            opts, single=False, add_other_text="üìù –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", add_preset=True
        )
        _send(text, markup); return

    if step_key == 'A2_functions':
        text, markup = multiselect_screen(
            ch, 'A2_functions', '–ü–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ª–∏ –≤—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω–∞ —Å–∞–π—Ç–µ? (–º—É–ª—å—Ç–∏–≤—ã–±–æ—Ä)',
            A2_FUNCTIONS, single=False, add_other_text="üìù –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç"
        )
        _send(text, markup); return

    if step_key == 'B1_sections':
        text, markup = multiselect_screen(
            ch, 'B1_sections', '–†–∞–∑–¥–µ–ª—ã –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞ (–º—É–ª—å—Ç–∏–≤—ã–±–æ—Ä):',
            B1_SECTIONS, single=False, add_other_text="üìù –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", add_preset=True
        )
        _send(text, markup); return

    if step_key == 'B2_assort':
        text, markup = multiselect_screen(
            ch, 'B2_assort', '–°–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ? (–æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç)',
            B2_ASSORT, single=True
        )
        _send(text, markup); return

    if step_key == 'B3_functions':
        text, markup = multiselect_screen(
            ch, 'B3_functions', '–ö–∞–∫–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω—É–∂–µ–Ω –≤ –º–∞–≥–∞–∑–∏–Ω–µ, –∫—Ä–æ–º–µ –∫–æ—Ä–∑–∏–Ω—ã? (–º—É–ª—å—Ç–∏–≤—ã–±–æ—Ä)',
            B3_FUNCTIONS, single=False
        )
        _send(text, markup); return

    if step_key == 'C1_tasks':
        text, markup = multiselect_screen(
            ch, 'C1_tasks', '–ì–¥–µ —á–∞—Ç-–±–æ—Ç –ø—Ä–∏–Ω–µ—Å—ë—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø–æ–ª—å–∑—É? (–º—É–ª—å—Ç–∏–≤—ã–±–æ—Ä)',
            C1_TASKS, single=False, add_other_text="üìù –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", add_preset=True
        )
        _send(text, markup); return

    if step_key == 'C2_platforms':
        text, markup = multiselect_screen(
            ch, 'C2_platforms', '–í –∫–∞–∫–∏—Ö –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞—Ö/–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å —á–∞—Ç-–±–æ—Ç?',
            C2_PLATFORMS, single=False, add_other_text="üìù –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç"
        )
        _send(text, markup); return

    if step_key == 'C3_integrations':
        text, markup = multiselect_screen(
            ch, 'C3_integrations', '–ù—É–∂–Ω—ã –ª–∏ –í–∞–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏?',
            C3_INTEGR, single=False
        )
        _send(text, markup); return

    if step_key == 'D1_goals':
        text, markup = multiselect_screen(
            ch, 'D1_goals', '–ö–∞–∫—É—é –∑–∞–¥–∞—á—É —Ö–æ—Ç–∏—Ç–µ —Ä–µ—à–∏—Ç—å –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–º? (–º—É–ª—å—Ç–∏–≤—ã–±–æ—Ä)',
            D1_GOALS, single=False, add_other_text="üìù –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", add_preset=True
        )
        _send(text, markup); return

    if step_key == 'D2_channels':
        text, markup = multiselect_screen(
            ch, 'D2_channels', '–ö–∞–∫–∏–µ –∫–∞–Ω–∞–ª—ã –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å? (–º—É–ª—å—Ç–∏–≤—ã–±–æ—Ä)',
            D2_CHANNELS, single=False
        )
        _send(text, markup); return

    if step_key == 'D3_current':
        text, markup = multiselect_screen(
            ch, 'D3_current', '–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å —É–∂–µ –¥–µ–π—Å—Ç–≤—É—é—â–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏ –∏–ª–∏ —Å–∞–π—Ç?',
            D3_CURRENT, single=True
        )
        _send(text, markup); return

    if step_key == 'D4_budget':
        text, markup = multiselect_screen(
            ch, 'D4_budget', '–ö–∞–∫–æ–π –ø—Ä–∏–º–µ—Ä–Ω—ã–π –±—é–¥–∂–µ—Ç –Ω–∞ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥ –µ–∂–µ–º–µ—Å—è—á–Ω–æ?',
            D4_BUDGET, single=True
        )
        _send(text, markup); return

    if step_key == 'design':
        text, markup = multiselect_screen(
            ch, 'design', '–î–∏–∑–∞–π–Ω: —É–Ω–∏–∫–∞–ª—å–Ω—ã–π / —à–∞–±–ª–æ–Ω / –ø–æ—Å–æ–≤–µ—Ç—É–π—Ç–µ (–æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç)',
            DESIGN, single=True
        )
        _send(text, markup); return

    if step_key == 'content':
        text, markup = multiselect_screen(
            ch, 'content', '–ö–æ–Ω—Ç–µ–Ω—Ç: –∫—Ç–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª—ã? (–æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç)',
            CONTENT, single=True
        )
        _send(text, markup); return

    if step_key == 'integrations_common':
        text, markup = multiselect_screen(
            ch, 'integrations_common', '–ù—É–∂–Ω—ã –ª–∏ –í–∞–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏?',
            INTEGR_COMMON, single=False
        )
        _send(text, markup); return

    if step_key == 'timeline':
        sol = USER[ch]["solution"]
        opts = []
        if sol in ("–õ–µ–Ω–¥–∏–Ω–≥", "–ß–∞—Ç-–±–æ—Ç", "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ (SEO/–∫–æ–Ω—Ç–µ–∫—Å—Ç)"):
            opts = [("1-2w", "1‚Äì2 –Ω–µ–¥–µ–ª–∏"), ("2-4w", "2‚Äì4 –Ω–µ–¥–µ–ª–∏")]
        elif sol == "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Å–∞–π—Ç":
            opts = [("2-4w", "2‚Äì4 –Ω–µ–¥–µ–ª–∏"), ("1-2m", "1‚Äì2 –º–µ—Å—è—Ü–∞")]
        elif sol == "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω":
            opts = [("1-2m", "1‚Äì2 –º–µ—Å—è—Ü–∞"), ("2-4m", "2‚Äì4 –º–µ—Å—è—Ü–∞")]
        text, markup = multiselect_screen(
            ch, 'timeline', '–ö–∞–∫ –±—ã—Å—Ç—Ä–æ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞–±–æ—Ç—É?',
            opts, single=True
        )
        _send(text, markup); return

    if step_key == 'contacts':
        bot.set_state(ch, St.contacts, ch)
        hdr = framed(
            "<b>–ë–ª–∞–≥–æ–¥–∞—Ä—é –í–∞—Å –∑–∞ –æ—Ç–≤–µ—Ç—ã.</b>\n"
            "<b>–û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>"
        )
        _send(
            f"{render_progress(done, total)}{hdr}\n"
            "‚Ä¢ üìß –ü–æ—á—Ç–∞\n"
            "‚Ä¢ üì± –¢–µ–ª–µ—Ñ–æ–Ω\n"
            "‚Ä¢ üí¨ @username\n\n"
            "<i>–ú–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –ª—é–±–æ–π –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç —Ç–µ–∫—Å—Ç–æ–º.</i>",
            kb(add_back=True, add_home=True)
        )
        return

    if step_key == 'confirm':
        d = USER[ch]["data"]
        name = d.get("name", "‚Äî")
        s = [
            f"<b>–ò–º—è:</b> {name}",
            f"<b>–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:</b> {d.get('org_name', '‚Äî')} ({d.get('org_category', '‚Äî')})",
            f"<b>–ï—Å—Ç—å —Å–∞–π—Ç:</b> {d.get('has_site', '‚Äî')}",
        ]
        if d.get("has_site_comment"):
            s.append(f"<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Å–∞–π—Ç—É:</b> {d.get('has_site_comment')}")
        s += [
            f"<b>–ü—Ä–æ–¥—É–∫—Ç/—É—Å–ª—É–≥–∞:</b> {d.get('product', '‚Äî')}",
            f"<b>–ë–∏–∑–Ω–µ—Å-–∑–∞–¥–∞—á–∞:</b> {d.get('biz_goal', '‚Äî')}",
            f"<b>–¶–ê:</b> {d.get('audience', '‚Äî')}",
            f"<b>–¶–µ–ª–µ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b> {d.get('user_action', '‚Äî')}",
            f"<b>–¢–∏–ø —Ä–µ—à–µ–Ω–∏—è:</b> {USER[ch]['solution']}",
            f"<b>–°—Ä–æ–∫–∏:</b> {pretty_items(d.get('timeline'))}",
            f"<b>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</b> {d.get('contacts', '‚Äî')}",
        ]
        _send(
            f"{render_progress(done, total)}{framed('<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ</b>')}\n" + "\n".join(s),
            kb([types.InlineKeyboardButton(f"{EMOJI['confirm']} –°–∫–∞—á–∞—Ç—å –ö–ü (PDF)", callback_data="go_pdf")],
               add_home=True)
        )
        return


# =========================
# –•–≠–õ–ü–ï–† –î–õ–Ø –í–´–í–û–î–ê
# =========================
def pretty_items(entry):
    if not entry:
        return "‚Äî"
    if isinstance(entry, dict) and "items" in entry:
        items = entry["items"]
        text = ", ".join(items)
        return text + (f"; –î—Ä—É–≥–æ–µ: {entry.get('other')}" if entry.get("other") else "")
    return str(entry)


# =========================
# PDF
# =========================
HTML_KP = r"""
<!doctype html><html><head><meta charset="utf-8">
<title>–ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ</title>
<style>
body{font-family:Arial, sans-serif; margin:40px; color:#222; line-height:1.6}
.header{text-align:center;margin-bottom:24px;border-bottom:2px solid {{ brand }};padding-bottom:10px}
.header h1{margin:6px 0 0 0;color:{{ brand }}}
.section{margin:18px 0}
.title{font-weight:bold;font-size:18px;color:{{ brand }};border-bottom:1px solid {{ brand }};padding-bottom:6px;margin-bottom:8px}
.item{margin:6px 0}
.muted{color:{{ muted }}}
.page-break{page-break-before:always}
.note{background:#fff9db;border-left:4px solid #ffd43b;padding:12px;border-radius:6px}
</style></head><body>

<div class="header"><div class="muted">–î–∞—Ç–∞: {{ date }}</div><h1>–ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ</h1></div>

<div class="section">
  <div class="title">–î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏ —Ü–µ–ª–∏</div>
  <div class="item"><b>–ò–º—è:</b> {{ d.name }}</div>
  <div class="item"><b>–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:</b> {{ d.org_name }}</div>
  <div class="item"><b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {{ d.org_category }}</div>
  <div class="item"><b>–ï—Å—Ç—å —Å–∞–π—Ç:</b> {{ d.has_site }}</div>
  {% if d.has_site_comment %}<div class="item"><b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Å–∞–π—Ç—É:</b> {{ d.has_site_comment }}</div>{% endif %}
  <div class="item"><b>–ü—Ä–æ–¥—É–∫—Ç/—É—Å–ª—É–≥–∞:</b> {{ d.product }}</div>
  <div class="item"><b>–ë–∏–∑–Ω–µ—Å-–∑–∞–¥–∞—á–∞:</b> {{ d.biz_goal }}</div>
  <div class="item"><b>–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è:</b> {{ d.audience }}</div>
  <div class="item"><b>–¶–µ–ª–µ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b> {{ d.user_action }}</div>
  <div class="item"><b>–¢–∏–ø —Ä–µ—à–µ–Ω–∏—è:</b> {{ solution }}</div>
</div>

<div class="page-break"></div>
<div class="section">
  <div class="title">–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π</div>
  {% for k,v in branch.items() %}
    <div class="item"><b>{{ k }}:</b> {{ v }}</div>
  {% endfor %}
</div>

<div class="page-break"></div>
<div class="section">
  <div class="title">–°—Ä–æ–∫–∏ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏</div>
  <div class="item"><b>–î–∏–∑–∞–π–Ω:</b> {{ common.design }}</div>
  <div class="item"><b>–ö–æ–Ω—Ç–µ–Ω—Ç:</b> {{ common.content }}</div>
  <div class="item"><b>–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:</b> {{ common.integr }}</div>
  <div class="item"><b>–°—Ä–æ–∫–∏:</b> {{ common.timeline }}</div>
  <div class="note">–†–∞—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏ –¥–æ–ø. –æ–ø—Ü–∏–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–∑–∂–µ.</div>
</div>

<div class="page-break"></div>
<div class="section">
  <div class="title">–ö–æ–Ω—Ç–∞–∫—Ç—ã</div>
  <div class="item"><b>–ö–æ–Ω—Ç–∞–∫—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞:</b> {{ d.contacts }}</div>
  <div class="item"><b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</b> {{ vendor_name }}</div>
  {% if vendor_contacts %}<div class="item"><b>–°–≤—è–∑—å:</b> {{ vendor_contacts }}</div>{% endif %}
</div>
</body></html>
"""


def render_branch_for_pdf(d: dict, solution: str):
    out = {}
    if 'A1_blocks' in d: out["–ë–ª–æ–∫–∏/—Ä–∞–∑–¥–µ–ª—ã"] = pretty_items(d['A1_blocks'])
    if 'A2_functions' in d: out["–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª"] = pretty_items(d['A2_functions'])
    if 'B1_sections' in d: out["–†–∞–∑–¥–µ–ª—ã –º–∞–≥–∞–∑–∏–Ω–∞"] = pretty_items(d['B1_sections'])
    if 'B2_assort' in d: out["–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç"] = pretty_items(d['B2_assort'])
    if 'B3_functions' in d: out["–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –º–∞–≥–∞–∑–∏–Ω–∞"] = pretty_items(d['B3_functions'])
    if 'C1_tasks' in d: out["–ó–∞–¥–∞—á–∏ —á–∞—Ç-–±–æ—Ç–∞"] = pretty_items(d['C1_tasks'])
    if 'C2_platforms' in d: out["–ü–ª–∞—Ç—Ñ–æ—Ä–º—ã"] = pretty_items(d['C2_platforms'])
    if 'C3_integrations' in d: out["–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞"] = pretty_items(d['C3_integrations'])
    if 'D1_goals' in d: out["–¶–µ–ª–∏ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞"] = pretty_items(d['D1_goals'])
    if 'D2_channels' in d: out["–ö–∞–Ω–∞–ª—ã"] = pretty_items(d['D2_channels'])
    if 'D3_current' in d: out["–¢–µ–∫—É—â–∞—è —Å–∏—Ç—É–∞—Ü–∏—è"] = pretty_items(d['D3_current'])
    if 'D4_budget' in d: out["–ë—é–¥–∂–µ—Ç"] = pretty_items(d['D4_budget'])
    return out


def make_pdf(ch: int):
    d = USER[ch]["data"]
    solution = USER[ch]["solution"]
    branch = render_branch_for_pdf(d, solution)
    common = types.SimpleNamespace(
        design=pretty_items(d.get('design')),
        content=pretty_items(d.get('content')),
        integr=pretty_items(d.get('integrations_common')),
        timeline=pretty_items(d.get('timeline')),
    )
    html = Template(HTML_KP).render(
        brand=THEME['brand'], muted=THEME['muted'],
        date=datetime.now().strftime("%d.%m.%Y"),
        d=types.SimpleNamespace(**{k: v if not isinstance(v, dict) else v for k, v in d.items()}),
        solution=solution, branch=branch, common=common,
        vendor_name=os.getenv("VENDOR_NAME", "–í–∞—à–∞ —Å—Ç—É–¥–∏—è"),
        vendor_contacts=os.getenv("VENDOR_CONTACTS", "")
    )
    out = f"KP_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
    config = pdfkit.configuration(wkhtmltopdf=WKHTML)
    pdfkit.from_string(html, out, configuration=config)
    return out


# =========================
# –ü–û–¢–û–ö/–í–ï–¢–ö–ò
# =========================
def apply_branch_flow(ch: int, solution_label: str):
    USER[ch]["solution"] = solution_label
    USER[ch]["multiselect_ctx"] = {}

    if solution_label in ("–õ–µ–Ω–¥–∏–Ω–≥", "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Å–∞–π—Ç"):
        b = 'A'
    elif solution_label == "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω":
        b = 'B'
    elif solution_label == "–ß–∞—Ç-–±–æ—Ç":
        b = 'C'
    else:
        b = 'D'
    USER[ch]["branch"] = b
    USER[ch]["flow"] = BASE_FLOW + BRANCH_FLOW[b] + COMMON_FLOW
    USER[ch]["idx"] = USER[ch]["flow"].index('solution')


# =========================
# CALLBACK-–∏
# =========================
@bot.callback_query_handler(func=lambda c: True)
def on_cb(c: types.CallbackQuery):
    ch, mid, data = c.message.chat.id, c.message.message_id, c.data
    try:
        bot.answer_callback_query(c.id)
    except Exception:
        pass
    log.info(
        f"cb:{data} idx={USER.get(ch, {}).get('idx')} step={USER.get(ch, {}).get('flow', [None])[USER.get(ch, {}).get('idx', 0)] if USER.get(ch) else '‚Äî'}")

    try:
        if data == "act_start":
            init_user(ch)
            send_step(ch, 'name', mid, edit=True)
            return
        if data == "act_about":
            safe_edit_text(ch, mid, "ü§ñ –ë—Ä–∏—Ñ —Å –≤–µ—Ç–≤–ª–µ–Ω–∏—è–º–∏ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Å–∞–π—Ç–∞. –í –∫–æ–Ω—Ü–µ ‚Äî PDF (–±–µ–∑ —Å—Ç–æ–∏–º–æ—Å—Ç–∏).",
                           main_menu_kb())
            return
        if data == "ui_home":
            safe_edit_text(ch, mid, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", main_menu_kb())
            return
        if data == "ui_back":
            USER[ch]["idx"] = max(0, USER[ch]["idx"] - 1)
            send_step(ch, cur_step(ch), mid, edit=True)
            return

        # –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if data.startswith("cat_"):
            USER[ch]["data"]["org_category"] = \
                {"cat_fl": "–§–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ", "cat_ip": "–ò–ü", "cat_ul": "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ", "cat_other": "–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç"}[
                    data]
            next_step(ch)
            send_step(ch, cur_step(ch), mid, edit=True)
            return

        # –µ—Å—Ç—å —Å–∞–π—Ç?
        if data in ("yn_yes", "yn_no") and cur_step(ch) == "has_site":
            USER[ch]["data"]["has_site"] = "–î–∞" if data == "yn_yes" else "–ù–µ—Ç"
            if data == "yn_yes":
                bot.set_state(ch, St.has_site_comment, ch)
                prompt = framed(
                    "<b>–ß—Ç–æ –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è –≤ –≤–∞—à–µ–º —Å–∞–π—Ç–µ, –∏ —á—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å?</b>\n"
                    "<i>–ù–∞–ø—Ä–∏–º–µ—Ä: ¬´–Ω—Ä–∞–≤–∏—Ç—Å—è –¥–∏–∑–∞–π–Ω, –Ω–æ –Ω–µ—Ç –∫–æ—Ä–∑–∏–Ω—ã¬ª.</i>"
                )
                safe_edit_text(
                    ch, mid,
                    f"{render_progress(USER[ch]['idx'] + 1, total_steps(ch))}{prompt}",
                    kb([types.InlineKeyboardButton(f"{EMOJI['back']} –ù–∞–∑–∞–¥", callback_data="ui_back")],
                       [types.InlineKeyboardButton(f"{EMOJI['home']} –í –º–µ–Ω—é", callback_data="ui_home")]))
            else:
                next_step(ch)
                send_step(ch, cur_step(ch), mid, edit=True)
            return

        # goal buttons
        if data.startswith("goal_"):
            mm = {"goal_sell": "–ü—Ä–æ–¥–∞–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –∏–ª–∏ —É—Å–ª—É–≥–∏", "goal_leads": "–°–æ–±–∏—Ä–∞—Ç—å –∑–∞—è–≤–∫–∏",
                  "goal_info": "–ò–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, —Ç–æ–≤–∞—Ä–∞—Ö –∏–ª–∏ —É—Å–ª—É–≥–∞—Ö",
                  "goal_brand": "–ü–æ–≤—ã—à–∞—Ç—å —É–∑–Ω–∞–≤–∞–µ–º–æ—Å—Ç—å –±—Ä–µ–Ω–¥–∞"}
            if data == "goal_custom":
                bot.set_state(ch, St.biz_goal, ch)
                safe_edit_text(
                    ch, mid,
                    f"{render_progress(USER[ch]['idx'] + 1, total_steps(ch))}"
                    f"{framed('–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∫–ª—é—á–µ–≤—É—é –∑–∞–¥–∞—á—É —Ç–µ–∫—Å—Ç–æ–º:')}",
                    kb(add_back=True, add_home=True)
                )
            else:
                USER[ch]["data"]["biz_goal"] = mm[data]
                next_step(ch)
                send_step(ch, cur_step(ch), mid, edit=True)
            return

        # user action buttons
        if data.startswith("act_"):
            mm = {"act_buy": "–ö—É–ø–∏—Ç—å", "act_call": "–ü–æ–∑–≤–æ–Ω–∏—Ç—å", "act_lead": "–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", "act_sub": "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"}
            if data == "act_custom":
                bot.set_state(ch, St.user_action, ch)
                safe_edit_text(
                    ch, mid,
                    f"{render_progress(USER[ch]['idx'] + 1, total_steps(ch))}"
                    f"{framed('–£–∫–∞–∂–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ —Ç–µ–∫—Å—Ç–æ–º:')}",
                    kb(add_back=True, add_home=True)
                )
            else:
                USER[ch]["data"]["user_action"] = mm[data]
                next_step(ch)
                send_step(ch, cur_step(ch), mid, edit=True)
            return

        # solution + info
        if data == "sol_info":
            safe_edit_text(ch, mid, SERVICES_INFO,
                           kb([types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_solution")], add_home=True))
            return
        if data == "back_solution":
            send_step(ch, 'solution', mid, edit=True)
            return
        if data.startswith("sol_"):
            label = {"sol_land": "–õ–µ–Ω–¥–∏–Ω–≥", "sol_shop": "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω", "sol_corp": "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Å–∞–π—Ç",
                     "sol_bot": "–ß–∞—Ç-–±–æ—Ç", "sol_mkt": "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ (SEO/–∫–æ–Ω—Ç–µ–∫—Å—Ç)"}[data]
            apply_branch_flow(ch, label)
            next_step(ch)  # –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –ø–µ—Ä–≤—ã–π —à–∞–≥ –≤–µ—Ç–∫–∏
            send_step(ch, cur_step(ch), mid, edit=True)
            return

        # ==== –º—É–ª—å—Ç–∏–≤—ã–±–æ—Ä ====
        if data.startswith("opt::"):
            _, step, key = data.split("::", 2)
            toggle_select(ch, key)
            send_step(ch, step, mid, edit=True)
            return

        if data.startswith("done::"):
            _, step = data.split("::", 1)
            save_multiselect(ch)
            next_step(ch)
            send_step(ch, cur_step(ch), mid, edit=True)
            return

        if data.startswith("other::"):
            _, step = data.split("::", 1)
            multiselect_state(ch)["step"] = step
            bot.set_state(ch, St.other_input, ch)
            safe_edit_text(
                ch, mid,
                f"{render_progress(USER[ch]['idx'] + 1, total_steps(ch))}"
                f"{framed('–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–∞—Ä–∏–∞–Ω—Ç —Ç–µ–∫—Å—Ç–æ–º:')}",
                kb(add_back=True, add_home=True)
            )
            return

        if data.startswith("preset::"):
            _, step = data.split("::", 1)
            # –ø—Ä–µ—Å–µ—Ç—ã
            if step == "A1_blocks":
                sol = USER[ch]["solution"]
                preset = [k for k, _ in (A1_LANDING if sol == "–õ–µ–Ω–¥–∏–Ω–≥" else A1_CORP)][:4]
            elif step == "B1_sections":
                preset = ["home", "catalog", "pdp", "cart", "contacts"]
            elif step == "C1_tasks":
                preset = ["faq", "consult", "booking"]
            elif step == "D1_goals":
                preset = ["leads", "seo"]
            else:
                preset = []
            start_multiselect(ch, step, single=False, seed=preset)
            send_step(ch, step, mid, edit=True)
            return

        # —Å–º–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if data.startswith("page::"):
            _, step, page_s = data.split("::", 2)
            st = multiselect_state(ch)
            st["step"] = step
            st["page"] = max(0, int(page_s))
            send_step(ch, step, mid, edit=True)
            return

        # pdf
        if data == "go_pdf":
            safe_edit_text(ch, mid, "‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é PDF‚Ä¶")
            try:
                path = make_pdf(ch)
                with open(path, "rb") as f:
                    bot.send_document(ch, f, caption="‚úÖ –ö–ü –≥–æ—Ç–æ–≤–æ (—á–µ—Ä–Ω–æ–≤–∏–∫ –±–µ–∑ —Å—Ç–æ–∏–º–æ—Å—Ç–∏).")
            except Exception:
                log.exception("pdf error")
                bot.send_message(ch, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ wkhtmltopdf.")
            return

    except Exception:
        log.exception("callback error")


# =========================
# –¢–ï–ö–°–¢–û–í–´–ï –í–í–û–î–´
# =========================
@bot.message_handler(commands=['start'])
def on_start(m):
    init_user(m.chat.id)
    # ‚ö†Ô∏è –ï—Å–ª–∏ —Ñ–æ—Ç–æ –ø–æ –ø—É—Ç–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –±–ª–æ–∫ –Ω–∏–∂–µ
    try:
        with open("C:/Users/Maksim/Documents/–ü–ª–∞—Ç–æ–Ω/chat bot/–±–æ—Ç –ö–ü/—Ñ–æ—Ç–æ.jpg", "rb") as photo:
            bot.send_photo(m.chat.id, photo)
    except Exception:
        pass

    bot.send_message(
        m.chat.id,
        "üëã <b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!  –ú–µ–Ω—è –∑–æ–≤—É—Ç –ï–≤–∞!</b>\n\n–Ø –ø–æ–º–æ–≥—É –í–∞–º —Å–æ–∑–¥–∞—Ç—å —Å–∞–π—Ç –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ!\n\n"
        "–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.",
        reply_markup=main_menu_kb()
    )


@bot.message_handler(state=St.name)
def in_name(m):
    ch = m.chat.id
    t = m.text.strip()
    if len(t) < 2:
        bot.send_message(ch, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∏–º—è –µ—â—ë —Ä–∞–∑.")
        return
    USER[ch]["data"]["name"] = t
    next_step(ch)
    send_step(ch, cur_step(ch))


@bot.message_handler(state=St.org_name)
def in_org_name(m):
    ch = m.chat.id
    t = m.text.strip()
    if len(t) < 2:
        bot.send_message(ch, "‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏.")
        return
    USER[ch]["data"]["org_name"] = t
    next_step(ch)
    send_step(ch, cur_step(ch))


@bot.message_handler(state=St.has_site_comment)
def in_site_comment(m):
    ch = m.chat.id
    USER[ch]["data"]["has_site_comment"] = m.text.strip()
    next_step(ch)
    send_step(ch, cur_step(ch))


@bot.message_handler(state=St.product)
def in_product(m):
    ch = m.chat.id
    USER[ch]["data"]["product"] = m.text.strip()
    next_step(ch)
    send_step(ch, cur_step(ch))


@bot.message_handler(state=St.biz_goal)
def in_goal(m):
    ch = m.chat.id
    USER[ch]["data"]["biz_goal"] = m.text.strip()
    next_step(ch)
    send_step(ch, cur_step(ch))


@bot.message_handler(state=St.audience)
def in_aud(m):
    ch = m.chat.id
    USER[ch]["data"]["audience"] = m.text.strip()
    next_step(ch)
    send_step(ch, cur_step(ch))


@bot.message_handler(state=St.user_action)
def in_act(m):
    ch = m.chat.id
    USER[ch]["data"]["user_action"] = m.text.strip()
    next_step(ch)
    send_step(ch, cur_step(ch))


@bot.message_handler(state=St.other_input)
def in_other(m):
    ch = m.chat.id
    set_other_value(ch, m.text.strip())
    step = USER[ch]["multiselect_ctx"]["step"]
    send_step(ch, step)


@bot.message_handler(state=St.contacts)
def in_contacts(m):
    ch, txt = m.chat.id, m.text.strip()
    email_re = r'^[\w\.-]+@[\w\.-]+\.[a-zA-Z]{2,}$'
    phone_re = r'^\+?\d[\d\-\s]{6,}$'
    if not (txt.startswith("@") or re.match(email_re, txt) or re.match(phone_re, txt)):
        bot.send_message(ch, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã (email/—Ç–µ–ª–µ—Ñ–æ–Ω/@username).")
        return
    USER[ch]["data"]["contacts"] = txt
    next_step(ch)
    send_step(ch, cur_step(ch))


@bot.message_handler(func=lambda m: True)
def fallback(m):
    ch = m.chat.id
    if ch not in USER:
        on_start(m)
    else:
        send_step(ch, cur_step(ch))


# =========================
# RUN
# =========================
if __name__ == "__main__":
    print("Bot is running‚Ä¶")
    bot.add_custom_filter(telebot.custom_filters.StateFilter(bot))
    bot.infinity_polling()
